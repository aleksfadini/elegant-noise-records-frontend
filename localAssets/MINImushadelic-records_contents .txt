Prompt: Analyze the mushadelic-records repository to understand its structure, purpose, and functionality. Follow these steps to study the codebase:

1. Read the README file to gain an overview of the project, its goals, and any setup instructions.

2. Examine the repository structure to understand how the files and directories are organized.

3. Identify the main entry point of the application (e.g., main.py, app.py, index.js) and start analyzing the code flow from there.

4. Study the dependencies and libraries used in the project to understand the external tools and frameworks being utilized.

5. Analyze the core functionality of the project by examining the key modules, classes, and functions.

6. Look for any configuration files (e.g., config.py, .env) to understand how the project is configured and what settings are available.

7. Investigate any tests or test directories to see how the project ensures code quality and handles different scenarios.

8. Review any documentation or inline comments to gather insights into the codebase and its intended behavior.

9. Identify any potential areas for improvement, optimization, or further exploration based on your analysis.

10. Provide a summary of your findings, including the project's purpose, key features, and any notable observations or recommendations.

Use the files and contents provided below to complete this analysis:


Repository Structure: mushadelic-records
/.commitlintrc.json
/.editorconfig
/.eslintrc
/.github/
/.gitignore
/.husky/
/.npmrc
/.nvmrc
/.prettierrc
/@types/
/LICENSE.md
/README.md
/apollo.ts
/codegen.yml
/next-env.d.ts
/next.config.js
/package.json
/public/
/renovate.json
/src/
/tsconfig.json
/yarn.lock
/src/components/
/src/firebase-config.js
/src/generated/
/src/graphql/
/src/lib/
/src/pages/
/src/styles/
/src/styles/global.scss
/src/styles/styles.module.scss
/src/pages/_app.tsx
/src/pages/api/
/src/pages/artist/
/src/pages/artists/
/src/pages/contact/
/src/pages/contract-view/
/src/pages/contract/
/src/pages/demos/
/src/pages/index.jsx
/src/pages/playlist/
/src/pages/register/
/src/pages/release/
/src/pages/share/
/src/pages/share/[slug].tsx
/src/pages/share/styles.module.scss
/src/pages/release/[slug].tsx
/src/pages/release/styles.module.scss
/src/pages/register/index.tsx
/src/pages/playlist/index.tsx
/src/pages/demos/index.jsx
/src/pages/contract/index.jsx
/src/pages/contract/styles.module.scss
/src/pages/contract-view/index.tsx
/src/pages/contract-view/styles.module.scss
/src/pages/contact/index.jsx
/src/pages/artists/index.jsx
/src/pages/artists/styles.module.scss
/src/pages/artist/[slug].tsx
/src/pages/artist/styles.module.scss
/src/pages/api/auth/
/src/pages/api/login.ts
/src/pages/api/auth/[...nextauth].js
/src/lib/urql.ts
/src/graphql/queries/
/src/graphql/queries/artists.graphql
/src/graphql/queries/login.graphql
/src/graphql/queries/release.graphql
/src/graphql/queries/releases.graphql
/src/generated/graphql.tsx
/src/components/FilterInput/
/src/components/HeaderMobile/
/src/components/ImageUploader/
/src/components/Layout/
/src/components/Sidebar/
/src/components/Sidebar/index.tsx
/src/components/Sidebar/styles.module.scss
/src/components/Layout/index.tsx
/src/components/ImageUploader/index.tsx
/src/components/HeaderMobile/index.tsx
/src/components/HeaderMobile/styles.module.scss
/src/components/FilterInput/index.tsx
/public/contract.html
/public/favicon.ico
/public/images/
/public/images/f1.jpg
/public/images/f2.jpg
/public/images/f3.jpg
/public/images/logo.png
/public/images/mobile.png
/@types/react-color-extractor/
/@types/react-color-extractor/index.d.ts
/.husky/commit-msg
/.husky/common.sh
/.husky/pre-commit
/.github/workflows/
/.github/workflows/ci.yml


File: /.commitlintrc.json
Content:
{
  "extends": ["@commitlint/config-conventional"]
}


File: /.editorconfig
Content:
root = true

[*]
indent_style = space
indent_size = 2
charset = utf-8
end_of_line = lf
trim_trailing_whitespace = true
insert_final_newline = true

File: /.eslintrc
Content:
{
  "plugins": ["prettier"],
  "extends": ["next", "next/core-web-vitals", "prettier"],
  "rules": {
    "prettier/prettier": "error",
    "camelcase": "off",
    "import/prefer-default-export": "off",
    "react/jsx-filename-extension": "off",
    "react/jsx-props-no-spreading": "off",
    "react/no-unused-prop-types": "off",
    "react/require-default-props": "off",
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "never",
        "tsx": "never",
        "js": "never",
        "jsx": "never"
      }
    ],
    "quotes": "off",
    "jsx-a11y/anchor-is-valid": [
      "error",
      {
        "components": ["Link"],
        "specialLink": ["hrefLeft", "hrefRight"],
        "aspects": ["invalidHref", "preferButton"]
      }
    ]
  },
  "overrides": [
    {
      "files": "**/*.+(ts|tsx)",
      "parser": "@typescript-eslint/parser",
      "plugins": ["@typescript-eslint/eslint-plugin"],
      "extends": ["plugin:@typescript-eslint/recommended", "prettier"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "no-use-before-define": [0],
        "@typescript-eslint/no-use-before-define": [1],
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/quotes": [
          2,
          "backtick",
          {
            "avoidEscape": true
          }
        ]
      }
    }
  ]
}


File: /.gitignore
Content: Skipped binary file

File: /.npmrc
Content:
save-exact = true


File: /.nvmrc
Content:
12.22


File: /.prettierrc
Content:
{
  "trailingComma": "all",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2
}



File: /apollo.ts
Content:
import { ApolloClient, InMemoryCache } from '@apollo/client';

const client = new ApolloClient({
  uri: `https://api-sa-east-1.hygraph.com/v2/clcrrxpwx0itk01ue4dhrfvag/master`, // Substitua pela URL da sua API GraphQL
  cache: new InMemoryCache(),
});

export default client;


File: /codegen.yml
Content:
overwrite: true

schema: 'https://api-sa-east-1.hygraph.com/v2/clcrrxpwx0itk01ue4dhrfvag/master'

documents: './src/graphql/**/*.graphql'

generates:
  src/generated/graphql.tsx:
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-urql'
    config:
      withHooks: true

File: /next-env.d.ts
Content:
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.


File: /next.config.js
Content:
module.exports = {
  reactStrictMode: true,
};


File: /package.json
Content:
{
  "name": "anunnaki-records",
  "description": "Electronica Jazz Experimental Label",
  "version": "1.0.0",
  "private": true,
  "author": "Daniel Luiz Alves (daniel.xcoders@gmail.com)",
  "license": "MIT",
  "keywords": [
    "label",
    "psytrance",
    "brazilian"
  ],
  "scripts": {
    "dev": "next",
    "build": "next build",
    "start": "next start",
    "type-check": "tsc",
    "lint": "eslint --ignore-path .gitignore \"src/**/*.+(ts|js|tsx)\"",
    "format": "prettier --ignore-path .gitignore \"src/**/*.+(ts|js|tsx)\" --write",
    "postinstall": "husky install",
    "commit": "cz",
    "codegen": "graphql-codegen --config codegen.yml"
  },
  "lint-staged": {
    "./src/**/*.{ts,js,jsx,tsx}": [
      "eslint --ignore-path .gitignore --fix",
      "prettier --ignore-path .gitignore --write"
    ]
  },
  "dependencies": {
    "@apollo/client": "3.7.16",
    "@emotion/react": "11.11.1",
    "@emotion/styled": "11.11.0",
    "@mui/material": "5.13.5",
    "apollo-cache-inmemory": "1.6.6",
    "apollo-client": "2.6.10",
    "apollo-link-http": "1.5.17",
    "bulma": "0.9.4",
    "emailjs-com": "3.2.0",
    "firebase": "9.8.2",
    "graphql": "16.7.0",
    "isomorphic-fetch": "3.0.0",
    "next": "12.1.6",
    "next-auth": "4.22.1",
    "node-sass": "7.0.1",
    "react": "18.1.0",
    "react-color-extractor": "1.1.2",
    "react-dom": "18.1.0",
    "react-hook-form": "7.31.3",
    "react-icons": "4.3.1",
    "react-query": "3.39.3",
    "react-responsive-masonry": "2.1.4",
    "react-signature-canvas": "1.0.6",
    "react-toastify": "9.0.3",
    "sweetalert2": "11.7.12",
    "urql": "3.0.3"
  },
  "devDependencies": {
    "@commitlint/cli": "17.0.0",
    "@commitlint/config-conventional": "17.0.0",
    "@graphql-codegen/cli": "2.16.1",
    "@graphql-codegen/import-types-preset": "2.2.6",
    "@graphql-codegen/typescript": "2.8.5",
    "@graphql-codegen/typescript-operations": "2.5.10",
    "@graphql-codegen/typescript-urql": "3.7.3",
    "@types/isomorphic-fetch": "0.0.36",
    "@types/node": "16.11.36",
    "@types/react": "18.0.9",
    "@types/react-dom": "18.0.5",
    "@typescript-eslint/eslint-plugin": "5.26.0",
    "@typescript-eslint/parser": "5.26.0",
    "commitizen": "4.2.4",
    "cz-conventional-changelog": "3.3.0",
    "eslint": "8.16.0",
    "eslint-config-next": "12.1.6",
    "eslint-config-prettier": "8.5.0",
    "eslint-import-resolver-typescript": "2.7.1",
    "eslint-plugin-prettier": "4.0.0",
    "husky": "8.0.1",
    "lint-staged": "12.4.1",
    "prettier": "2.6.2",
    "typescript": "4.6.4"
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  }
}


File: /renovate.json
Content:
{
  "extends": ["config:base"],
  "semanticCommits": true,
  "stabilityDays": 3,
  "prCreation": "not-pending",
  "labels": ["type: dependencies"],
  "packageRules": [
    {
      "packageNames": ["node"],
      "enabled": false
    }
  ]
}


File: /tsconfig.json
Content:
{
  "compilerOptions": {
    "target": "es2015",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/public/*": ["./public/*"]
    },
    "incremental": true
  },
  "exclude": ["node_modules"],
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "src/pages/index.jsx", "src/pages/login/index.jsx", "src/pages/api/login.ts", "src/pages/dashboard/index.jsx", "src/pages/contract-view/index.jsx", "src/utils/imageResizer.ts"]
}


JSONStream@^1.0.4:
  version "1.3.5"
  resolved "https://registry.yarnpkg.com/JSONStream/-/JSONStream-1.3.5.tgz#3208c1f08d3a4d99261ab64f92302bc15e111ca0"
  integrity sha512-E+iruNOY8VV9s4JEbe1aNEm6MiszPRr/UfcHMz0TQh1BXSxHK+ASV1R6W4HpjBhSeS+54PIsAMCBmwD06LLsqQ==
  dependencies:
    jsonparse "^1.2.0"
    through ">=2.2.7 <3"

// integrity omitted for brevity

File: /src/firebase-config.js
Content:
// Import the functions you need from the SDKs you need
import { getFirestore } from '@firebase/firestore';
import { initializeApp } from 'firebase/app';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};

const app = initializeApp(firebaseConfig);

export const db = getFirestore(app);


File: /src/styles/global.scss
Content:
@import '~bulma/bulma.sass';

html,
body {
  padding: 0;
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen,
    Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;
  background: #111111;
  min-height: 100vh;
}

a {
  color: inherit;
  text-decoration: none;
}

* {
  box-sizing: border-box;
}

input {
  background-color: #111111 !important;
  color: #ffffff !important;
  border-color: #9ef300 !important ;
}

textarea {
  background-color: #111111 !important;
  color: #ffffff !important;
  border-color: #9ef300 !important ;
}

input.placeholder-light::placeholder {
  color: #a1a1a1;
  opacity: 1;
}

.main {
  margin-left: 260px;
}

@media (max-width: 770px) {
  .main {
    margin-left: 0;
  }
}

input:focus {
  border-color: #9ef300 !important;
  box-shadow: 0 0 0 0.125em #04070440 !important;
}

textarea:focus {
  border-color: #9ef300 !important;
  box-shadow: 0 0 0 0.125em #04070440 !important;
}

.pointer {
  cursor: pointer;
}

label {
  color: #fff;
}

.title-header {
  color: #fff;
  font-size: 1.5rem;
  margin-bottom: 0.5rem;
  font-weight: bold;
}

.button-green {
  background-color: #9ef300;
  border-color: #9ef300;
  color: #333;
  width: 6rem;
  margin-top: 1rem;

  &:hover {
    border-color: #9ef300;
    opacity: 0.9;
  }
}

.input-wrapper {
  display: flex;
  align-items: center;
  position: relative;
}

.password-toggle {
  position: absolute;
  top: 50%;
  right: 10px;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  cursor: pointer;
}


File: /src/styles/styles.module.scss
Content:
.imageMargin {
  color: #fff;
  margin: 0.5rem;
  display: flex;
  flex-direction: column;
  cursor: pointer;
  transform-origin: 65% 75%;
  transition: transform 1s, filter 0.5s ease-out;

  &:hover {
    opacity: 0.95;
    transform: scale(1.02);
    color: #9ef300;
  }

  transition: all 0.2s;
}

.shine {
  position: relative;
  overflow: hidden;
  height: 97%;
  border-radius: 5px;

  &::before {
    background: linear-gradient(
      to right,
      fade_out(#fff, 1) 0%,
      fade_out(#fff, 0.7) 100%
    );
    content: '';
    display: block;
    height: 100%;
    left: -75%;
    position: absolute;
    top: 0;
    transform: skewX(-25deg);
    width: 50%;
    z-index: 2;
  }

  &:hover,
  &:focus {
    &::before {
      animation: shine 1.2s;
    }
  }

  @keyframes shine {
    100% {
      left: 125%;
    }
  }
}


File: /src/pages/_app.tsx
Content:
import '@/styles/global.scss';
import { AppProps } from 'next/app';
// import Layout from '../components/Layout';
import { Provider } from 'urql';
import { client as urqlClient } from '../../src/lib/urql';
import { SessionProvider } from 'next-auth/react';
import { ApolloProvider } from '@apollo/client';
import client from '../../apollo';

export default function MyApp({
  Component,
  pageProps: { session, ...pageProps },
}: AppProps) {
  return (
    <SessionProvider session={session}>
      <ApolloProvider client={client}>
        <Provider value={urqlClient}>
          <Component {...pageProps} />
        </Provider>
      </ApolloProvider>
    </SessionProvider>
  );
}


File: /src/pages/index.jsx
Content:
/* eslint-disable @next/next/no-img-element */
import Layout from '@/components/Layout';
import { useReleasesQuery } from '@/generated/graphql';
import styles from '@/styles/styles.module.scss';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';
import { FilterInput } from '../components/FilterInput';

export default function Home() {
  const [value, setValue] = useState('');
  const [{ data }] = useReleasesQuery();

  function filterTracks(e) {
    const query = e.target.value;
    setValue(query);
    const filteredReleases = data?.releases.filter(
      (release) =>
        release.music_name.toLowerCase().indexOf(query.toLowerCase()) > -1,
    );
    setReleases(filteredReleases);
    return;
  }

  const [releases, setReleases] = useState([]);

  useEffect(() => {
    const getReleases = async () => {
      await setReleases(data?.releases);
    };

    getReleases();
  }, [data]);

  return (
    <Layout>
      <FilterInput
        value={value}
        filter={filterTracks}
        placeholder="Search Releases"
      />
      <div className="mb-5">
        <ResponsiveMasonry
          columnsCountBreakPoints={{
            350: 1,
            750: 2,
            1000: 4,
            1300: 5,
            1500: 6,
          }}
        >
          <Masonry>
            {releases?.map((release) => (
              <Link href={`/release/${release.slug}`} key={release.id}>
                <div className={styles.imageMargin}>
                  <div className={styles.shine}>
                    <img
                      src={release.cover_art.url}
                      alt={release.music_name}
                      style={{ borderRadius: 5 }}
                    />
                  </div>
                </div>
              </Link>
            ))}
          </Masonry>
        </ResponsiveMasonry>
      </div>
    </Layout>
  );
}


File: /src/pages/share/[slug].tsx
Content:
import React, { Fragment } from 'react';
import { ReleaseDocument } from '@/generated/graphql';
import styles from './styles.module.scss';
import { useRouter } from 'next/router';
import { useQuery } from 'urql';
import Head from 'next/head';

function SocialCard({ link, logo }: any) {
  return (
    <Fragment>
      {link && (
        <a
          href={link}
          target="_blank"
          rel="noreferrer"
          style={{
            width: `100%`,
          }}
        >
          <div
            className="card"
            style={{
              backgroundColor: `#242323`,
              width: `100%`,
              display: `flex`,
              justifyContent: `center`,
              alignItems: `center`,
              padding: 20,
              cursor: `pointer`,
              height: 80,
            }}
          >
            <img src={logo} alt="" width={110} />
          </div>
        </a>
      )}
    </Fragment>
  );
}

const Share: React.FC = () => {
  const router = useRouter();
  const { slug } = router.query;

  const [result] = useQuery({
    query: ReleaseDocument,
    variables: { slug },
    requestPolicy: `cache-and-network`,
  });

  const release = result.data?.release;

  return (
    <>
      <Head>
        <title>
          {release?.music_name} - {release?.artist}
        </title>
        <meta name="description" content="Electronica Jazz Experimental Label" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{
          backgroundImage: `url(${release?.cover_art?.url})`,
          backgroundRepeat: `no-repeat`,
          backgroundSize: `cover`,
          filter: `blur(20px) opacity(0.7)`,
          width: `100%`,
          height: `100%`,
          position: `fixed`,
        }}
      />
      <div
        className="container is-max-desktop"
        style={{ maxWidth: 450, padding: 30 }}
      >
        <img
          src={release?.cover_art?.url}
          alt="image"
          style={{ borderRadius: 10 }}
        />
        <div
          style={{
            display: `flex`,
            justifyContent: `center`,
            alignItems: `center`,
            paddingTop: 10,
            color: `white`,
            fontWeight: 500,
            paddingLeft: 5,
            paddingRight: 5,
            flexDirection: `column`,
            gap: 20,
          }}
        >
          <span
            style={{ textAlign: `center`, textShadow: `2px 2px 8px #000000` }}
          >
            {`${release?.artist} - ${release?.music_name}`.toUpperCase()}
          </span>
        </div>
        <br />

        <div className={styles.socialCard}>
          <SocialCard
            link={release?.sptfy_link}
            logo="https://st.toneden.io/prod-assets/images/link-services/spotify.png"
          />
          <SocialCard
            link={release?.sc_link}
            logo="https://st.toneden.io/prod-assets/images/link-services/soundcloud.png"
          />
          <SocialCard
            link={release?.buy_link}
            logo="https://st.toneden.io/prod-assets/images/link-services/beatport.png"
          />
          <SocialCard
            link={release?.yt_link}
            logo="https://st.toneden.io/prod-assets/images/link-services/youtube.png"
          />
          <SocialCard
            link={release?.deezer_link}
            logo="https://st.toneden.io/prod-assets/images/link-services/deezer.png"
          />
          <SocialCard
            link={release?.apple_link}
            logo="https://st.toneden.io/prod-assets/images/link-services/apple-music.png"
          />
        </div>
        <div
          className="mt-6"
          style={{
            textAlign: `center`,
            textShadow: `2px 2px 8px #000000`,
            color: `#fff`,
            fontSize: 12,
          }}
        >
          <span>
            Developed by:{` `}
            <a href="https://daniel-luiz-alves.vercel.app/">Daniel Alves</a>
          </span>
        </div>
      </div>
    </>
  );
};

export default Share;


File: /src/pages/share/styles.module.scss
Content:
.socialCard {
  display: flex;
  justify-content: center;
  align-items: center;
  padding-top: 10px;
  color: white;
  font-weight: 500;
  padding-left: 5px;
  padding-right: 5px;
  flex-direction: column;
  gap: 20px;
}


File: /src/pages/release/[slug].tsx
Content:
/* eslint-disable @next/next/no-img-element */
import { ReleaseDocument } from '@/generated/graphql';
import React, { Fragment, useState } from 'react';
import { SiBeatport, SiSoundcloud, SiSpotify, SiYoutube } from 'react-icons/si';
import { FaChevronCircleLeft } from 'react-icons/fa';
import { GiShare } from 'react-icons/gi';
import styles from './styles.module.scss';
import { useQuery } from 'urql';
import Layout from '@/components/Layout';
import { ColorExtractor } from 'react-color-extractor';
import { useRouter } from 'next/router';

export default function Release() {
  const [color, setColor] = useState<string>(`#111111`);
  const router = useRouter();
  const { slug } = router.query;

  const [result] = useQuery({
    query: ReleaseDocument,
    variables: { slug },
    requestPolicy: `cache-and-network`,
  });

  const release = result.data?.release;

  return (
    <Layout>
      <div
        style={{
          background: `linear-gradient(0deg, #111111, ${color} 100%)`,
          borderRadius: `15px 15px 0px 0px`,
          paddingBottom: `4%`,
          marginBottom: 30,
          paddingLeft: 15,
          paddingRight: 15,
        }}
      >
        <div className="is-hidden-mobile">
          <div className={styles.backIcon}>
            <FaChevronCircleLeft size={30} onClick={() => router.back()} />
          </div>
        </div>

        <div className="columns">
          <div className="column is-one-fifth">
            <div className={styles.shine}>
              <ColorExtractor getColors={(colors) => setColor(colors[0])}>
                <img
                  className={styles.img}
                  src={release?.cover_art?.url}
                  alt="cover art"
                />
              </ColorExtractor>
            </div>
          </div>
          <div className="column">
            <div className={styles.descriptionSection}>
              <span className={styles.title}>
                {release?.music_name?.toUpperCase()}
              </span>
              <span className={styles.artist}>
                {release?.artist?.toUpperCase()}
              </span>
              <div className={styles.icons}>
                <a href={release?.buy_link} target="_blank" rel="noreferrer">
                  <SiBeatport size={25} />
                </a>
                <a href={release?.sc_link} target="_blank" rel="noreferrer">
                  <SiSoundcloud size={25} />
                </a>
                <a href={release?.sptfy_link} target="_blank" rel="noreferrer">
                  <SiSpotify size={25} />
                </a>
                <a href={release?.yt_link} target="_blank" rel="noreferrer">
                  <SiYoutube size={25} />
                </a>
                <a href={`/share/${slug}`} target="_blank" rel="noreferrer">
                  <GiShare size={25} />
                </a>
              </div>
              {/* <div className={styles.limitText}>
                <span>{release?.description}</span>
              </div> */}
            </div>
          </div>
        </div>
      </div>

      <div
        dangerouslySetInnerHTML={{
          __html: release?.iframe_sc,
        }}
      ></div>
    </Layout>
  );
}


File: /src/pages/release/styles.module.scss
Content:
$overlay-color: rgba(255, 255, 255, 0.7);
$shadow-color: rgba(0, 0, 0, 0.2);

.descriptionSection {
  display: flex;
  gap: 1rem;
  flex-direction: column;
  color: #fff;
}

.title {
  font-size: 3rem;
  font-weight: bold;
  line-height: 0.9;
  text-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);

  @media (max-width: 1240px) {
    font-size: 2rem;
  }
}

.artist {
  font-size: 1rem;
  font-weight: bold;
  margin-left: 3px;
  text-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
}

.limitText {
  max-width: 55rem;
  text-align: justify;
}

.icons {
  display: flex;
  gap: 1.5rem;
  text-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
  a:hover {
    color: #111;
  }
}

.backIcon {
  text-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
  color: #fff;
  padding-bottom: 8px;
  padding-top: 12px;
  padding-left: 1px;

  svg:hover {
    opacity: 0.8;
    cursor: pointer;
  }
}

.img {
  border-radius: 15px;
  box-shadow: 0 4px 60px rgba(0, 0, 0, 0.5);
}

.shine {
  @media (min-width: 1221px) {
    position: relative;
    overflow: hidden;
    height: 98%;
    border-radius: 15px;

    &::before {
      background: linear-gradient(
        to right,
        fade_out(#fff, 1) 0%,
        fade_out(#fff, 0.7) 100%
      );
      content: '';
      display: block;
      height: 100%;
      left: -75%;
      position: absolute;
      top: 0;
      transform: skewX(-25deg);
      width: 50%;
      z-index: 2;
    }

    &:hover,
    &:focus {
      &::before {
        animation: shine 1.2s;
      }
    }

    @keyframes shine {
      100% {
        left: 125%;
      }
    }
  }
}


File: /src/pages/register/index.tsx
Content:
import React, { useState, FormEvent } from 'react';
import { Button, Box, FormControl, Container, Typography } from '@mui/material';
import ImageUploader from '@/components/ImageUploader';
import { gql, useMutation } from '@apollo/client';
import { useRouter } from 'next/router';
import { AiFillEye, AiFillEyeInvisible } from 'react-icons/ai';
import Swal from 'sweetalert2';
import Head from 'next/head';

interface FormData {
  email: string;
  username: string;
  password: string;
  passwordConfirm?: string;
  project_name: string;
  responsable_name: string;
  picture: string | null;
}

const todayPassword = `mush${new Date().getFullYear()}&${new Date().getMonth()}@recs!`;

const RegistrationForm: React.FC = () => {
  const router = useRouter();
  const [imageValue, setImageValue] = useState<string | null>(null);
  const [usernameError, setUsernameError] = useState<string>(``);
  const [showPassword, setShowPassword] = useState<boolean>(false);
  const [liberationPassword, setLiberationPassword] = useState(``);
  const [hasAccess, setHasAccess] = useState<boolean>(false);

  const [showPasswordConfirm, setShowPasswordConfirm] =
    useState<boolean>(false);

  const handleGiveAccess = (event: React.FormEvent) => {
    event.preventDefault();

    if (liberationPassword === todayPassword) {
      setHasAccess(true);
    } else {
      setHasAccess(false);
    }

    setLiberationPassword(``);
  };

  const handleImageChange = (dataUrl: string) => {
    setImageValue(dataUrl);
  };

  const handleTogglePassword = () => {
    setShowPassword(!showPassword);
  };

  const handleTogglePasswordConfirm = () => {
    setShowPasswordConfirm(!showPasswordConfirm);
  };

  const [formData, setFormData] = useState<FormData>({
    email: ``,
    username: ``,
    password: ``,
    passwordConfirm: ``,
    project_name: ``,
    responsable_name: ``,
    picture: null,
  });

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;

    if (name === `username`) {
      const trimmedValue = value.trim();

      if (trimmedValue.includes(` `)) {
        setUsernameError(`Não é permitido inserir espaços no username.`);
      } else {
        setUsernameError(``);
      }
    }

    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const isPasswordSecure = (password: string): boolean => {
    const minLength = 8;
    const hasUppercase = /[A-Z]/.test(password);
    const hasLowercase = /[a-z]/.test(password);
    const hasNumber = /[0-9]/.test(password);

    return (
      password.length >= minLength && hasUppercase && hasLowercase && hasNumber
    );
  };

  const isEmailValid = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const INSERT_DATA = gql`
    mutation createDashboard($input: DashboardCreateInput!) {
      createDashboard(data: $input) {
        id
      }
    }
  `;

  const PUBLISH_DATA = gql`
    mutation publishDashboard($id: ID!) {
      publishDashboard(where: { id: $id }) {
        id
      }
    }
  `;

  const [createDashboard] = useMutation(INSERT_DATA);
  const [publishDashboard] = useMutation(PUBLISH_DATA);

  const handleSaveData = async (finalData: FormData) => {
    try {
      const { data } = await createDashboard({
        variables: {
          input: {
            ...finalData,
          },
        },
      });

      console.log(data.createDashboard.id);

      const id = data.createDashboard.id;

      try {
        const { data } = await publishDashboard({
          variables: {
            id: id,
          },
        });
        Swal.fire({
          icon: `success`,
          title: `Nice!`,
          text: `
          Account successfully created!`,
        });
        router.push(`/contract`);
      } catch (error) {
        console.log(error);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();

    if (formData.password !== formData.passwordConfirm) {
      Swal.fire({
        icon: `error`,
        title: `Oops...`,
        text: `Passwords do not match. Please check again.`,
      });
      return;
    }

    if (!isPasswordSecure(formData.password)) {
      Swal.fire({
        icon: `error`,
        title: `Oops...`,
        text: `Password must be at least 8 characters long, include uppercase letters, lowercase letters and numbers. Please try again.`,
      });
      return;
    }

    if (!isEmailValid(formData.email)) {
      Swal.fire({
        icon: `error`,
        title: `Oops...`,
        text: `Please enter a valid email.`,
      });
      return;
    }

    if (formData.username.includes(` `)) {
      Swal.fire({
        icon: `error`,
        title: `Oops...`,
        text: `Your username is not valid as it contains spaces. Choose another before continue.`,
      });

      return;
    }

    const { passwordConfirm, ...formDataWithoutConfirm } = formData;

    const formDataWithImage: FormData = {
      ...formDataWithoutConfirm,
      picture: imageValue,
    };

    handleSaveData(formDataWithImage);
  };

  return (
    <>
      {hasAccess ? (
        <Container maxWidth="md">
          <Head>
            <title>Register | Elegant Noise Records</title>
            <meta name="description" content="Electronica Jazz Experimental Label" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Box
            alignItems="center"
            display="flex"
            justifyContent="center"
            className="mt-6"
          >
            <img width="150" src="/images/logo.png" alt="logo" />
          </Box>
          <Typography
            variant="h4"
            color="white"
            align="center"
            className="mt-6 mb-3"
          >
            REGISTER TO SIGN THE CONTRACT
          </Typography>
          <form onSubmit={handleSubmit} className="mb-6">
            <FormControl fullWidth margin="normal" variant="outlined">
              <div className="mb-2">
                <label>E-mail</label>
              </div>
              <input
                name="email"
                value={formData.email}
                onChange={handleChange}
                className="input"
                required
              />
            </FormControl>
            <FormControl fullWidth margin="normal" variant="outlined">
              <div className="mb-2">
                <label>Username</label>
              </div>
              <input
                name="username"
                value={formData.username}
                onChange={handleChange}
                className="input"
                required
              />
              {usernameError && (
                <p style={{ color: `red`, fontSize: 12, marginTop: 8 }}>
                  {usernameError}
                </p>
              )}
            </FormControl>
            <FormControl fullWidth margin="normal" variant="outlined">
              <div className="mb-2">
                <label>Password</label>
              </div>
              <div className="input-wrapper">
                <input
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  className="input"
                  type={showPassword ? `text` : `password`}
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={handleTogglePassword}
                >
                  {showPassword ? (
                    <AiFillEyeInvisible color="#9ef300" size={18} />
                  ) : (
                    <AiFillEye color="#9ef300" size={18} />
                  )}
                </button>
              </div>
            </FormControl>
            <FormControl fullWidth margin="normal" variant="outlined">
              <div className="mb-2">
                <label>Confirm Password</label>
              </div>
              <div className="input-wrapper">
                <input
                  name="passwordConfirm"
                  value={formData.passwordConfirm}
                  onChange={handleChange}
                  className="input"
                  type={showPasswordConfirm ? `text` : `password`}
                  required
                />
                <button
                  type="button"
                  className="password-toggle"
                  onClick={handleTogglePasswordConfirm}
                >
                  {showPasswordConfirm ? (
                    <AiFillEyeInvisible color="#9ef300" size={18} />
                  ) : (
                    <AiFillEye color="#9ef300" size={18} />
                  )}
                </button>
              </div>
            </FormControl>
            <FormControl fullWidth margin="normal" variant="outlined">
              <div className="mb-2">
                <label>Project Name</label>
              </div>
              <input
                name="project_name"
                value={formData.project_name}
                onChange={handleChange}
                className="input"
                required
              />
            </FormControl>
            <FormControl fullWidth margin="normal" variant="outlined">
              <div className="mb-2">
                <label>Responsable Fullname</label>
              </div>
              <input
                name="responsable_name"
                value={formData.responsable_name}
                onChange={handleChange}
                className="input"
                required
              />
            </FormControl>
            <FormControl fullWidth margin="normal" variant="outlined">
              <div className="mb-2">
                <label>Profile Image</label>
              </div>
              <div>
                <ImageUploader onImageChange={handleImageChange} />
              </div>
            </FormControl>

            <Box display="flex" justifyContent="flex-end" mt={2}>
              <Button type="submit" variant="contained" color="success">
                Register
              </Button>
            </Box>
          </form>
        </Container>
      ) : (
        <Container maxWidth="sm">
          <Box
            alignItems="center"
            display="flex"
            justifyContent="center"
            className="mt-6 mb-6"
          >
            <img width="150" src="/images/logo.png" alt="logo" />
          </Box>

          <form onSubmit={handleGiveAccess}>
            <div className="mb-2">
              <label>Type the code to access this page</label>
            </div>
            <input
              type="password"
              value={liberationPassword}
              onChange={(event) => setLiberationPassword(event.target.value)}
              className="input mb-3"
            />

            <Box display="flex" justifyContent="center" mt={2}>
              <Button type="submit" variant="contained" color="success">
                Activate
              </Button>
            </Box>
          </form>
        </Container>
      )}
    </>
  );
};

export default RegistrationForm;


File: /src/pages/playlist/index.tsx
Content:
import { useEffect } from 'react';

const Redirect = () => {
  useEffect(() => {
    const externalLink = `https://open.spotify.com/playlist/2On9Qqg6sunRFYP5lhCoSv?si=V79Fv3YeS9iU2fM0qD9Pqw&nd`;

    window.location.href = externalLink;
  }, []);

  return null;
};

export default Redirect;


File: /src/pages/demos/index.jsx
Content:
import emailjs from 'emailjs-com';
import { useForm } from 'react-hook-form';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Layout from '@/components/Layout';

export default function Contact() {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm();

  const toastifySuccess = () => {
    toast.success(`DEMO sent!`, {
      position: `top-right`,
      autoClose: 5000,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: false,
      className: `submit-feedback success`,
      toastId: `notifyToast`,
    });
  };

  const toastifyError = () => {
    toast.error(`An error has occurred, please try again`, {
      position: `top-right`,
      autoClose: 5000,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: false,
      className: `submit-feedback success`,
      toastId: `notifyToast`,
    });
  };

  const onSubmit = async (data) => {
    const { name, email, message, artist_name, country } = data;

    try {
      const templateParams = {
        name,
        email,
        message,
        artist_name,
        country,
      };

      await emailjs.send(
        process.env.NEXT_PUBLIC_EMAIL_SERVICE,
        process.env.NEXT_PUBLIC_EMAIL_TEMPLATE_DEMO,
        templateParams,
        process.env.NEXT_PUBLIC_EMAIL_USER,
      );

      toastifySuccess();

      reset();
    } catch (e) {
      toastifyError();
    }
  };
  return (
    <Layout>
      <div>
        <div className=" is-flex  mb-4 mr-2 ">
          <div className="field title-header">
            <span>SUBMIT YOUR DEMO</span>
          </div>
        </div>
        <form id="contact-form" onSubmit={handleSubmit(onSubmit)} noValidate>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Email</label>
              </div>
              <input
                type="email"
                {...register(`email`, {
                  required: true,
                  pattern:
                    /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                })}
                className="input "
              />
              {errors.email && (
                <span className="help is-danger">
                  Please enter a valid email address
                </span>
              )}
            </div>
          </div>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Name</label>
              </div>
              <input
                type="text"
                {...register(`name`, {
                  required: {
                    value: true,
                    message: 'Please enter your name',
                  },
                  maxLength: {
                    value: 30,
                    message: 'Please use 30 characters or less',
                  },
                })}
                className="input"
              />
              {errors.name && (
                <span className="help is-danger">{errors.name.message}</span>
              )}
            </div>
          </div>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Artist Name</label>
              </div>
              <input
                type="text"
                {...register(`artist_name`, {
                  required: {
                    value: true,
                    message: 'Please enter your artist name',
                  },
                  maxLength: {
                    value: 30,
                    message: 'Please use 30 characters or less',
                  },
                })}
                className="input"
              />
              {errors.artist_name && (
                <span className="help is-danger">
                  {errors.artist_name.message}
                </span>
              )}
            </div>
          </div>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Soundcloud Demo (Private Link)</label>
              </div>
              <input
                type="text"
                {...register(`country`, {
                  required: {
                    value: true,
                    message: 'Please enter your artist name',
                  },
                  maxLength: {
                    value: 500,
                    message: 'Please use 500 characters or less',
                  },
                })}
                className="input"
              />
              {errors.country && (
                <span className="help is-danger">{errors.country.message}</span>
              )}
            </div>
          </div>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Release of your project</label>
              </div>
              <textarea
                rows={5}
                {...register(`message`, {
                  required: true,
                })}
                className="textarea"
              />
              {errors.message && (
                <span className="help is-danger">
                  Please enter a release of your project
                </span>
              )}
            </div>
          </div>

          <button className="button button-green mb-6" type="submit">
            Send
          </button>
        </form>
      </div>

      <ToastContainer position="top-right" />
    </Layout>
  );
}

export async function getStaticProps() {
  return {
    props: {},
  };
}


File: /src/pages/contract/index.jsx
Content:
import { useSession, signIn, signOut } from 'next-auth/react';

import * as React from 'react';
import { useRef } from 'react';
import SignatureCanvas from 'react-signature-canvas';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';
import Container from '@mui/material/Container';
import styles from './styles.module.scss';
import { LoginDocument } from '@/generated/graphql';
import { useQuery as URQL } from 'urql';
import { gql, useMutation } from '@apollo/client';
import Avatar from '@mui/material/Avatar';
import Modal from '@mui/material/Modal';
import Link from 'next/link';
import Swal from 'sweetalert2';
import Head from 'next/head';

export default function Component() {
  const { data: session } = useSession();
  const [createSign, setCreateSign] = React.useState(false);
  const [open, setOpen] = React.useState(false);
  const [contractData, setContractData] = React.useState({});

  const handleOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  const handleAssinarContrato = async () => {
    const newData = {
      is_signed_contract: true,
    };

    try {
      const { data } = await updateDashboard({
        variables: {
          id: contractData.id,
          input: {
            ...newData,
          },
        },
      });

      try {
        const { data } = await publishDashboard({
          variables: {
            id: contractData.id,
          },
        });

        Swal.fire({
          icon: `success`,
          title: `Signed contract! `,
          text: `Now the same is available on your profile.`,
        }).then(function () {
          window.location.reload();
        });
      } catch (error) {
        console.log(error);
      }
    } catch (error) {
      console.log(error);
    }

    handleClose();
  };

  const [result] = URQL({
    query: LoginDocument,
    variables: { username: session?.user?.name },
    requestPolicy: `cache-and-network`,
  });

  const { data } = result;

  React.useEffect(() => {
    setContractData(data?.dashboard);
  }, [data]);

  const signatureCanvasRef = useRef();

  const handleSaveSignature = async () => {
    const isEmptySign = signatureCanvasRef?.current?.isEmpty();

    if (isEmptySign)
      return Swal.fire({
        icon: `error`,
        title: `Signature is empty!`,
        text: `Your signature cannot be blank! Sign correctly.`,
      });

    const dataUrl = signatureCanvasRef?.current?.toDataURL();

    const newData = {
      signature: dataUrl,
    };

    try {
      const { data } = await updateDashboard({
        variables: {
          id: contractData.id,
          input: {
            ...newData,
          },
        },
      });

      try {
        const { data } = await publishDashboard({
          variables: {
            id: contractData.id,
          },
        });
        Swal.fire({
          icon: `success`,
          title: `Signature created!`,
          text: `It is no longer possible to change it`,
        }).then(function () {
          window.location.reload();
        });
      } catch (error) {
        console.log(error);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const handleClearSignature = () => {
    signatureCanvasRef?.current?.clear();
  };

  const UPDATE_APP_DATA = gql`
    mutation updateDashboard($input: DashboardUpdateInput!, $id: ID!) {
      updateDashboard(data: $input, where: { id: $id }) {
        id
      }
    }
  `;

  const PUBLISH_APP_DATA = gql`
    mutation publishDashboard($id: ID!) {
      publishDashboard(where: { id: $id }) {
        id
      }
    }
  `;

  const [updateDashboard] = useMutation(UPDATE_APP_DATA);
  const [publishDashboard] = useMutation(PUBLISH_APP_DATA);

  if (session) {
    return (
      <Box sx={{ flexGrow: 1 }}>
        <Head>
          <title>Contract | Elegant Noise Records</title>
          <meta name="description" content="Electronica Jazz Experimental Label" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <AppBar position="static" color="success">
          <Toolbar>
            <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
              <b>Elegant Noise Records</b>
            </Typography>

            <Button
              color="success"
              variant="contained"
              onClick={() => signOut()}
            >
              <>Logout</>
            </Button>
          </Toolbar>
        </AppBar>
        <Container maxWidth="xl">
          <Box
            sx={{
              width: `100%`,
              backgroundColor: `#333`,
              borderRadius: 4,
              marginTop: 4,
              marginBottom: 4,
              padding: 4,
            }}
          >
            <div>
              <Avatar
                alt={contractData?.project_name}
                src={contractData?.picture}
                sx={{ width: 150, height: 150 }}
              />
              <br />
              <Typography variant="h4" component="h1" color="#fff">
                <b>{contractData?.project_name}</b>
              </Typography>
              <br />
              <Typography variant="subtitle1" component="h2" color="#fff">
                <b>Manager:</b> {contractData?.responsable_name}
              </Typography>
              <br />
              <Typography variant="subtitle1" component="h2" color="#fff">
                <b>E-mail: </b> {contractData?.email}
              </Typography>
              <br />
              <Typography variant="subtitle1" component="h2" color="#fff">
                <b>Signature: </b>
              </Typography>
              {!createSign && (
                <div>
                  {!contractData?.signature && (
                    <Typography
                      variant="subtitle2"
                      color="#fff"
                    >{`You don't have a signature yet, click below and create one.`}</Typography>
                  )}
                </div>
              )}
              {createSign && (
                <div>
                  {!contractData?.signature && (
                    <Typography
                      variant="subtitle2"
                      color="#fff"
                    >{`Create your signature below, you will not be able to change it after confirming.`}</Typography>
                  )}
                  <br />
                </div>
              )}
              {!createSign && (
                <div>
                  {contractData?.signature && (
                    <Typography
                      variant="subtitle2"
                      color="#fff"
                    >{`You have already confirmed your subscription, it is no longer possible to change it.`}</Typography>
                  )}
                  <br />
                </div>
              )}

              {createSign && (
                <div>
                  <SignatureCanvas
                    ref={signatureCanvasRef}
                    canvasProps={{
                      width: 500,
                      height: 200,
                      backgroundColor: `#fff`,
                      className: `signature-canvas`,
                      style: { backgroundColor: `white` },
                    }}
                  />
                  <Box
                    sx={{
                      display: `flex`,
                      gap: 2,
                      marginTop: 1,
                    }}
                  >
                    <Button
                      variant="contained"
                      color="success"
                      onClick={handleSaveSignature}
                    >
                      Save signature
                    </Button>
                    <Button
                      variant="contained"
                      color="success"
                      onClick={handleClearSignature}
                    >
                      Clear signature
                    </Button>
                  </Box>
                </div>
              )}

              {!createSign && (
                <div>
                  {contractData?.signature ? (
                    <Box
                      sx={{
                        width: `fit-content`,
                        backgroundColor: `white`,
                        borderRadius: 2,
                        padding: 2,
                      }}
                    >
                      <img
                        src={contractData?.signature}
                        alt="signature"
                        width={200}
                      />
                    </Box>
                  ) : (
                    <Button
                      variant="contained"
                      color="success"
                      onClick={() => setCreateSign(true)}
                    >
                      Create signature
                    </Button>
                  )}
                </div>
              )}

              <br />
              <br />

              <Typography variant="subtitle1" component="h2" color="#fff">
                <b>Contract: </b>
              </Typography>

              {!contractData?.signature && (
                <>
                  <Typography
                    variant="subtitle2"
                    color="#fff"
                  >{`Create your signature first to see the contract.`}</Typography>
                  <br />
                </>
              )}

              {contractData?.is_signed_contract ? (
                <Button variant="contained" color="success">
                  <Link href={`/contract-view?id=${contractData?.username}`}>
                    <a target="_blank">Open signed contract</a>
                  </Link>
                </Button>
              ) : (
                <Button
                  variant="contained"
                  color="success"
                  disabled={!contractData?.signature}
                  onClick={handleOpen}
                >
                  Read and sign the contract
                </Button>
              )}
            </div>
          </Box>
        </Container>

        <Modal open={open} onClose={handleClose}>
          <Box
            sx={{
              width: `90%`,
              margin: `auto`,
              backgroundColor: `white`,
              padding: 4,
              marginTop: `3%`,
              borderRadius: 2,
            }}
          >
            <div>
              <iframe
                src="/contract-view"
                width="100%"
                height="600px"
                title="PDF Viewer"
              />
              <Button
                sx={{ marginTop: 2 }}
                variant="contained"
                color="primary"
                onClick={handleAssinarContrato}
              >
                Sign contract
              </Button>
            </div>
          </Box>
        </Modal>
      </Box>
    );
  }
  return (
    <>
      <Head>
        <title>Login | Elegant Noise Records</title>
        <meta name="description" content="Electronica Jazz Experimental Label" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container className={styles.loginContainer}>
        <Box
          alignItems="center"
          display="flex"
          justifyContent="center"
          className="mt-6"
        >
          <img width="220" src="/images/logo.png" alt="logo" />
        </Box>
        <div className={styles.loginButtons}>
          <Button variant="contained" color="success" onClick={() => signIn()}>
            Login
          </Button>
          <Link href="/register" passHref>
            <Button variant="contained" color="primary">
              Register
            </Button>
          </Link>
        </div>
      </Container>
    </>
  );
}


File: /src/pages/contract/styles.module.scss
Content:
.loginContainer {
  display: flex !important;
  justify-content: center;
  align-items: center;
  height: 100vh;
  gap: 80px;
  flex-direction: column;
}

.loginButtons {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 20px;
}

.strong {
  color: white;
}


File: /src/pages/contract-view/index.tsx
Content:
import React from 'react';
import styles from './styles.module.scss';
import { LoginDocument } from '@/generated/graphql';
import { useQuery } from 'urql';
import { useRouter } from 'next/router';
import Head from 'next/head';

const FolhasA4Centralizadas = () => {
  const { query } = useRouter();

  const [result] = useQuery({
    query: LoginDocument,
    variables: { username: query.id },
    requestPolicy: `cache-and-network`,
  });

  const { data } = result;

  return (
    <div className={styles.container}>
      <Head>
        <title>Contract Mushadelic</title>
        <meta name="description" content="Electronica Jazz Experimental Label" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.folha}>
        <img src="/images/f1.jpg" alt="" />
      </div>
      {data?.dashboard?.id && (
        <div className={styles.code2}>
          <span>Authentication code: {data?.dashboard?.id}</span>
        </div>
      )}

      <div className={styles.folha}>
        <img src="/images/f2.jpg" alt="" />
      </div>
      {data?.dashboard?.id && (
        <div className={styles.code2}>
          <span>Authentication code: {data?.dashboard?.id}</span>
        </div>
      )}

      <div className={styles.folha2}>
        {data?.dashboard?.signature && (
          <div className={styles.signature}>
            <img src={data?.dashboard?.signature} alt="" width={190} />
          </div>
        )}

        {data?.dashboard?.responsable_name && (
          <div className={styles.name}>
            <span>{data?.dashboard?.responsable_name}</span>
          </div>
        )}

        {data?.dashboard?.project_name && (
          <div className={styles.artist}>
            <span>{data?.dashboard?.project_name}</span>
          </div>
        )}

        {data?.dashboard?.updatedAt && (
          <div className={styles.hour}>
            <span>
              Date: {new Date(data?.dashboard?.updatedAt).toLocaleString()}
            </span>
          </div>
        )}

        {data?.dashboard?.id && (
          <div className={styles.code3}>
            <span>Authentication code: {data?.dashboard?.id}</span>
          </div>
        )}
      </div>
    </div>
  );
};

const App = () => {
  return (
    <div className="App">
      <FolhasA4Centralizadas />
    </div>
  );
};

export default App;


File: /src/pages/contract-view/styles.module.scss
Content:
.container {
  display: flex;
  flex-direction: column; /* Empilhar verticalmente */
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

.folha {
  width: 210mm; /* Largura de uma folha A4 */
  height: 297mm; /* Altura de uma folha A4 */
  background-color: white;
  margin: 20px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.folha2 {
  width: 210mm; /* Largura de uma folha A4 */
  height: 297mm; /* Altura de uma folha A4 */
  background-image: url("/images/f3.jpg");
  margin: 20px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  background-repeat: no-repeat;
  background-size: contain;
}

.signature {
  position: relative;
  z-index: 99;
  bottom: -871px;
  left: 139px;
}

.name {
  position: relative;
  z-index: 99;
  bottom: -879px;
  left: 192px;
  color: black;
  font-size: 0.8rem;
}

.artist {
  position: relative;
  z-index: 99;
  bottom: -879px;
  left: 201px;
  color: black;
  font-size: 0.8rem;
}

.hour {
  position: relative;
  z-index: 99;
  bottom: -879px;
  color: black;
  left: 130px;
  font-size: 0.8rem;
}

.code3 {
  position: relative;
  z-index: 99;
  bottom: -934px;
  color: #5c5c5c;
  left: 440px;
  font-size: 0.8rem;
}

.code2 {
  position: relative;
  bottom: 60px;
  color: #5c5c5c;
  left: 200px;
  font-size: 0.8rem;
}

.btnImprimir {
  position: fixed; /* Adiciona posicionamento absoluto para o botão */
  top: 20px;
  right: 20px;
  padding: 10px 20px;
  font-size: 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}


File: /src/pages/contact/index.jsx
Content:
import emailjs from 'emailjs-com';
import { useForm } from 'react-hook-form';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import Layout from '@/components/Layout';

export default function Contact() {
  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm();

  const toastifySuccess = () => {
    toast.success(`Email sent!`, {
      position: `top-right`,
      autoClose: 5000,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: false,
      className: `submit-feedback success`,
      toastId: `notifyToast`,
    });
  };

  const toastifyError = () => {
    toast.error(`An error has occurred, please try again`, {
      position: `top-right`,
      autoClose: 5000,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: false,
      className: `submit-feedback success`,
      toastId: `notifyToast`,
    });
  };

  const onSubmit = async (data) => {
    const { name, email, subject, message } = data;

    try {
      const templateParams = {
        name,
        email,
        subject,
        message,
      };

      await emailjs.send(
        process.env.NEXT_PUBLIC_EMAIL_SERVICE,
        process.env.NEXT_PUBLIC_EMAIL_TEMPLATE,
        templateParams,
        process.env.NEXT_PUBLIC_EMAIL_USER,
      );

      toastifySuccess();

      reset();
    } catch (e) {
      toastifyError();
    }
  };
  return (
    <Layout>
      <div>
        <div className=" is-flex  mb-4 mr-2 ">
          <div className="field title-header">
            <span>CONTACT</span>
          </div>
        </div>
        <form id="contact-form" onSubmit={handleSubmit(onSubmit)} noValidate>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Email</label>
              </div>
              <input
                type="email"
                {...register(`email`, {
                  required: true,
                  pattern:
                    /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/,
                })}
                className="input "
              />
              {errors.email && (
                <span className="help is-danger">
                  Please enter a valid email address
                </span>
              )}
            </div>
          </div>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Name</label>
              </div>
              <input
                type="text"
                {...register(`name`, {
                  required: {
                    value: true,
                    message: 'Please enter your name',
                  },
                  maxLength: {
                    value: 30,
                    message: 'Please use 30 characters or less',
                  },
                })}
                className="input"
              />
              {errors.name && (
                <span className="help is-danger">{errors.name.message}</span>
              )}
            </div>
          </div>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Subject</label>
              </div>
              <input
                type="text"
                {...register(`subject`, {
                  required: {
                    value: true,
                    message: 'Please enter a subject',
                  },
                  maxLength: {
                    value: 75,
                    message: 'Please use 75 characters or less',
                  },
                })}
                className="input "
              />
              {errors.subject && (
                <span className="help is-danger">{errors.subject.message}</span>
              )}
            </div>
          </div>
          <div className="columns">
            <div className="column">
              <div className="mb-2">
                <label>Message</label>
              </div>
              <textarea
                rows={5}
                {...register(`message`, {
                  required: true,
                })}
                className="textarea"
              />
              {errors.message && (
                <span className="help is-danger">Please enter a message</span>
              )}
            </div>
          </div>

          <button className="button button-green mb-6" type="submit">
            Send
          </button>
        </form>
      </div>

      <ToastContainer position="top-right" />
    </Layout>
  );
}

export async function getStaticProps() {
  return {
    props: {},
  };
}


File: /src/pages/artists/index.jsx
Content:
/* eslint-disable @next/next/no-img-element */
import { FilterInput } from '@/components/FilterInput';
import { db } from '@/firebase-config';
import { collection, getDocs } from 'firebase/firestore';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import Masonry, { ResponsiveMasonry } from 'react-responsive-masonry';
import styles from './styles.module.scss';
import Layout from '@/components/Layout';

export default function Home() {
  const [value, setValue] = useState('');
  function filterArtists(e) {
    const query = e.target.value;
    setValue(query);
    const filteredArtists = artistsMain.filter(
      (artist) =>
        artist.artist_name.toLowerCase().indexOf(query.toLowerCase()) > -1,
    );
    setArtists(filteredArtists);
    return;
  }

  const [artists, setArtists] = useState([]);
  const [artistsMain, setArtistsMain] = useState([]);
  const artistsRef = collection(db, 'artists');

  // console.log(artistsMain);

  function orderArtists(a, b) {
    if (a.artist_number < b.artist_number) {
      return -1;
    }
    if (a.artist_number > b.artist_number) {
      return 1;
    }
    return 0;
  }

  useEffect(() => {
    const getArtists = async () => {
      const data = await getDocs(artistsRef);
      const artists = data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));
      setArtists(artists.sort(orderArtists));
      setArtistsMain(artists.sort(orderArtists));
    };

    getArtists();
  }, []);

  return (
    <Layout>
      <FilterInput
        value={value}
        filter={filterArtists}
        placeholder="Search Artists"
      />
      <ResponsiveMasonry
        columnsCountBreakPoints={{ 350: 1, 750: 2, 1000: 4, 1300: 5, 1500: 6 }}
      >
        <Masonry>
          {artists.map((artist) => (
            <Link href={`/artist/${artist.slug}`} key={artist.id}>
              <div className={styles.imageMargin}>
                <div className={styles.flag}>
                  <img src={artist.flag} alt="flag" />
                </div>
                <img src={artist.picture} alt={artist.artist_name} />
                <div className={styles.nameSection}>
                  <span>{artist.artist_name.toUpperCase()}</span>
                </div>
              </div>
            </Link>
          ))}
        </Masonry>
      </ResponsiveMasonry>
    </Layout>
  );
}


File: /src/pages/artists/styles.module.scss
Content:
.nameSection {
  padding: 0.5rem;
  display: flex;
  justify-content: center;
  background: #181818;
  height: 3rem;
  align-items: center;
  font-size: 0.9rem;
  width: 100%;
}

.imageMargin {
  color: #fff;
  margin: 0.5rem;
  display: flex;
  flex-direction: column;
  cursor: pointer;
  transform-origin: 65% 75%;
  transition: transform 1s, filter .5s ease-out;
  align-items: end;


  &:hover {
    opacity: 0.95;
    transform: scale(1.02);
    color: #9ef300
  }

  transition: all 0.2s;
}

.flag {
    position: absolute;
    display: flex;
    width: 40px;
    margin-top: 5px;
    margin-right: 5px;
}


File: /src/pages/artist/[slug].tsx
Content:
/* eslint-disable @next/next/no-img-element */
import Layout from '@/components/Layout';
import { db } from '@/firebase-config';
import { collection, getDocs, query, where } from 'firebase/firestore';
import React from 'react';
import {
  SiFacebook,
  SiInstagram,
  SiSoundcloud,
  SiSpotify,
  SiYoutube,
} from 'react-icons/si';
import styles from './styles.module.scss';

export default function Artist({ artistReturn }: any) {
  return (
    <Layout>
      <div className="columns">
        <div className="column is-one-quarter">
          <img src={artistReturn.picture} alt="" />
        </div>
        <div className="column">
          <div className={styles.descriptionSection}>
            <span className={styles.title}>
              {artistReturn.artist_name.toUpperCase()}
            </span>
            <div className={styles.icons}>
              <a
                href={artistReturn.instgrm_link}
                target="_blank"
                rel="noreferrer"
              >
                <SiInstagram size={25} />
              </a>
              <a href={artistReturn.fb_link} target="_blank" rel="noreferrer">
                <SiFacebook size={25} />
              </a>
              <a href={artistReturn.sc_link} target="_blank" rel="noreferrer">
                <SiSoundcloud size={25} />
              </a>
              <a
                href={artistReturn.sptfy_link}
                target="_blank"
                rel="noreferrer"
              >
                <SiSpotify size={25} />
              </a>
              <a href={artistReturn.yt_link} target="_blank" rel="noreferrer">
                <SiYoutube size={25} />
              </a>
            </div>
            <div className={styles.limitText}>
              <span>{artistReturn.description}</span>
            </div>
          </div>
        </div>
      </div>
      <div
        style={{ padding: `0.5rem` }}
        dangerouslySetInnerHTML={{
          __html: artistReturn?.iframe_sc,
        }}
      />
    </Layout>
  );
}

export async function getStaticProps(context: any) {
  const artistsRef = collection(db, `artists`);

  const q = query(artistsRef, where(`slug`, `==`, `${context.params.slug}`));

  const data = await getDocs(q);
  const artist = data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));

  const artistReturn = artist.shift();

  return {
    props: { artistReturn },
  };
}

export async function getStaticPaths() {
  const artistsRef = collection(db, `artists`);

  const data = await getDocs(artistsRef);
  const artists = data.docs.map((doc) => ({ ...doc.data(), id: doc.id }));

  const artistsPaths = artists.map((artist: any) => {
    return {
      params: {
        slug: `${artist.slug}`,
      },
    };
  });

  return {
    paths: artistsPaths,
    fallback: false,
  };
}


File: /src/pages/artist/styles.module.scss
Content:
.descriptionSection {
  display: flex;
  gap: 1rem;
  flex-direction: column;
  color: #fff;
}

.title {
  font-size: 1.5rem;
  font-weight: bold;
}

.limitText {
  max-width: 55rem;
  text-align: justify;
}

.icons {
  display: flex;
  gap: 1.5rem;
  a:hover {
    color: #9ef300;
  }
}


File: /src/pages/api/login.ts
Content:
import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';
import fetch from 'isomorphic-fetch';
import { NextApiRequest, NextApiResponse } from 'next';
import { LoginDocument } from '@/generated/graphql';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  try {
    const { username } = req.query;

    const client = new ApolloClient({
      ssrMode: true,
      link: createHttpLink({
        uri: `https://api-sa-east-1.hygraph.com/v2/clcrrxpwx0itk01ue4dhrfvag/master`,
        fetch,
      }),
      cache: new InMemoryCache(),
    });

    const response = await client.query({
      query: LoginDocument,
      variables: {
        username,
      },
    });

    res.status(200).json(response.data);
  } catch (error) {
    console.error(`Erro na solicitação GraphQL:`, error);
    res.status(500).json({
      message: `Erro na solicitação GraphQL`,
    });
  }
}


File: /src/pages/api/auth/[...nextauth].js
Content:
import CredentialsProvider from 'next-auth/providers/credentials';
import NextAuth from 'next-auth';

export const authOptions = {
  // Configure one or more authentication providers
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Username', type: 'mail', placeholder: 'jsmith' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials, req) {
        try {
          const response = await fetch(
            `${process.env.NEXT_PUBLIC_APP_URL}/api/login?username=${credentials.email}`,
          );
          if (response.ok) {
            const data = await response.json();

            const correctPassword =
              data.dashboard.password === credentials.password ? true : false;

            const user = {
              id: data.dashboard.id,
              name: data.dashboard.username,
              email: data.dashboard.email,
            };

            if (user && correctPassword) {
              return user;
            } else {
              return null;
            }
          } else {
            throw new Error('Erro na solicitação');
          }
        } catch (error) {
          console.error('Erro na requisição:', error);
        }
      },
    }),
  ],
  secret: process.env.NEXTAUTH_SECRET,
};
export default NextAuth(authOptions);


File: /src/lib/urql.ts
Content:
import {
  cacheExchange,
  createClient,
  dedupExchange,
  fetchExchange,
  ssrExchange,
} from 'urql';

const isServerSide = typeof window === `undefined`;

const ssrCache = ssrExchange({ isClient: !isServerSide });

const client = createClient({
  url: `https://api-sa-east-1.hygraph.com/v2/clcrrxpwx0itk01ue4dhrfvag/master`,
  exchanges: [dedupExchange, cacheExchange, ssrCache, fetchExchange],
});

export { client, ssrCache };


File: /src/graphql/queries/artists.graphql
Content:
query Artists {
  artists(last: 9999) {
    id
    key
    artist_number
    artist_name
    facebook_link
    iframe_sc
    instgram_link
    slug
    sptfy_link
    sc_link
    yt_link
    description
    flag {
      url
    }
    picture {
      url
    }
  }
}

File: /src/graphql/queries/login.graphql
Content:
query Login($username: String) {
  dashboard(where: { username: $username }) {
    email
    id
    password
    project_name
    signature
    username
    responsable_name
    is_signed_contract
    updatedAt
    picture
  }
}


File: /src/graphql/queries/release.graphql
Content:
query Release($slug: String) {
  release(where: {slug: $slug}) {
    id
    music_name
    release_date
    sc_link
    slug
    description
    sptfy_link
    iframe_sc
    yt_link
    buy_link
    artist
    deezer_link
    apple_link
    cover_art {
      url(transformation: {image: {resize: {width: 1000}}})
    }
  }
}


File: /src/graphql/queries/releases.graphql
Content:
query Releases {
  releases(orderBy: release_date_DESC, last: 999) {
    id
    music_name
    release_date
    sc_link
    slug
    sptfy_link
    yt_link
    buy_link
    artist
    cover_art {
      url(transformation: {image: {resize: {width: 500}}})
    }
  }
}

File: /src/generated/graphql.tsx
Content:
import gql from 'graphql-tag';
import * as Urql from 'urql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
  DateTime: any;
  Hex: any;
  Json: any;
  Long: any;
  RGBAHue: any;
  RGBATransparency: any;
  RichTextAST: any;
};

export type Aggregate = {
  __typename?: 'Aggregate';
  count: Scalars['Int'];
};

/** Partners artists */
export type Artist = Node & {
  __typename?: 'Artist';
  artist_name: Scalars['String'];
  artist_number: Scalars['Int'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  description: Scalars['String'];
  /** Get the document in other stages */
  documentInStages: Array<Artist>;
  facebook_link?: Maybe<Scalars['String']>;
  flag: Asset;
  /** List of Artist versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  iframe_sc?: Maybe<Scalars['String']>;
  instgram_link?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['Int']>;
  picture?: Maybe<Asset>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  sc_link?: Maybe<Scalars['String']>;
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String'];
  sptfy_link: Scalars['String'];
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  yt_link?: Maybe<Scalars['String']>;
};

/** Partners artists */
export type ArtistCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Partners artists */
export type ArtistDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

/** Partners artists */
export type ArtistFlagArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Partners artists */
export type ArtistHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

/** Partners artists */
export type ArtistPictureArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Partners artists */
export type ArtistPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Partners artists */
export type ArtistScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};

/** Partners artists */
export type ArtistUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ArtistConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ArtistWhereUniqueInput;
};

/** A connection to a list of items. */
export type ArtistConnection = {
  __typename?: 'ArtistConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ArtistEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ArtistCreateInput = {
  artist_name: Scalars['String'];
  artist_number: Scalars['Int'];
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description: Scalars['String'];
  facebook_link?: InputMaybe<Scalars['String']>;
  flag: AssetCreateOneInlineInput;
  iframe_sc?: InputMaybe<Scalars['String']>;
  instgram_link?: InputMaybe<Scalars['String']>;
  key?: InputMaybe<Scalars['Int']>;
  picture?: InputMaybe<AssetCreateOneInlineInput>;
  sc_link?: InputMaybe<Scalars['String']>;
  slug: Scalars['String'];
  sptfy_link: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  yt_link?: InputMaybe<Scalars['String']>;
};

export type ArtistCreateManyInlineInput = {
  /** Connect multiple existing Artist documents */
  connect?: InputMaybe<Array<ArtistWhereUniqueInput>>;
  /** Create and connect multiple existing Artist documents */
  create?: InputMaybe<Array<ArtistCreateInput>>;
};

export type ArtistCreateOneInlineInput = {
  /** Connect one existing Artist document */
  connect?: InputMaybe<ArtistWhereUniqueInput>;
  /** Create and connect one Artist document */
  create?: InputMaybe<ArtistCreateInput>;
};

/** An edge in a connection. */
export type ArtistEdge = {
  __typename?: 'ArtistEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Artist;
};

/** Identifies documents */
export type ArtistManyWhereInput = {
// omitted for brevity for you Claude
};

export enum ArtistOrderByInput {
  ArtistNameAsc = `artist_name_ASC`,
  ArtistNameDesc = `artist_name_DESC`,
  ArtistNumberAsc = `artist_number_ASC`,
  ArtistNumberDesc = `artist_number_DESC`,
  CreatedAtAsc = `createdAt_ASC`,
  CreatedAtDesc = `createdAt_DESC`,
  DescriptionAsc = `description_ASC`,
  DescriptionDesc = `description_DESC`,
  FacebookLinkAsc = `facebook_link_ASC`,
  FacebookLinkDesc = `facebook_link_DESC`,
  IdAsc = `id_ASC`,
  IdDesc = `id_DESC`,
  IframeScAsc = `iframe_sc_ASC`,
  IframeScDesc = `iframe_sc_DESC`,
  InstgramLinkAsc = `instgram_link_ASC`,
  InstgramLinkDesc = `instgram_link_DESC`,
  KeyAsc = `key_ASC`,
  KeyDesc = `key_DESC`,
  PublishedAtAsc = `publishedAt_ASC`,
  PublishedAtDesc = `publishedAt_DESC`,
  ScLinkAsc = `sc_link_ASC`,
  ScLinkDesc = `sc_link_DESC`,
  SlugAsc = `slug_ASC`,
  SlugDesc = `slug_DESC`,
  SptfyLinkAsc = `sptfy_link_ASC`,
  SptfyLinkDesc = `sptfy_link_DESC`,
  UpdatedAtAsc = `updatedAt_ASC`,
  UpdatedAtDesc = `updatedAt_DESC`,
  YtLinkAsc = `yt_link_ASC`,
  YtLinkDesc = `yt_link_DESC`,
}

export type ArtistUpdateInput = {
  artist_name?: InputMaybe<Scalars['String']>;
  artist_number?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  facebook_link?: InputMaybe<Scalars['String']>;
  flag?: InputMaybe<AssetUpdateOneInlineInput>;
  iframe_sc?: InputMaybe<Scalars['String']>;
  instgram_link?: InputMaybe<Scalars['String']>;
  key?: InputMaybe<Scalars['Int']>;
  picture?: InputMaybe<AssetUpdateOneInlineInput>;
  sc_link?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  sptfy_link?: InputMaybe<Scalars['String']>;
  yt_link?: InputMaybe<Scalars['String']>;
};

export type ArtistUpdateManyInlineInput = {
  /** Connect multiple existing Artist documents */
  connect?: InputMaybe<Array<ArtistConnectInput>>;
  /** Create and connect multiple Artist documents */
  create?: InputMaybe<Array<ArtistCreateInput>>;
  /** Delete multiple Artist documents */
  delete?: InputMaybe<Array<ArtistWhereUniqueInput>>;
  /** Disconnect multiple Artist documents */
  disconnect?: InputMaybe<Array<ArtistWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Artist documents */
  set?: InputMaybe<Array<ArtistWhereUniqueInput>>;
  /** Update multiple Artist documents */
  update?: InputMaybe<Array<ArtistUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Artist documents */
  upsert?: InputMaybe<Array<ArtistUpsertWithNestedWhereUniqueInput>>;
};

export type ArtistUpdateManyInput = {
  artist_name?: InputMaybe<Scalars['String']>;
  artist_number?: InputMaybe<Scalars['Int']>;
  description?: InputMaybe<Scalars['String']>;
  facebook_link?: InputMaybe<Scalars['String']>;
  iframe_sc?: InputMaybe<Scalars['String']>;
  instgram_link?: InputMaybe<Scalars['String']>;
  key?: InputMaybe<Scalars['Int']>;
  sc_link?: InputMaybe<Scalars['String']>;
  sptfy_link?: InputMaybe<Scalars['String']>;
  yt_link?: InputMaybe<Scalars['String']>;
};

export type ArtistUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ArtistUpdateManyInput;
  /** Document search */
  where: ArtistWhereInput;
};

export type ArtistUpdateOneInlineInput = {
  /** Connect existing Artist document */
  connect?: InputMaybe<ArtistWhereUniqueInput>;
  /** Create and connect one Artist document */
  create?: InputMaybe<ArtistCreateInput>;
  /** Delete currently connected Artist document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Artist document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Artist document */
  update?: InputMaybe<ArtistUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Artist document */
  upsert?: InputMaybe<ArtistUpsertWithNestedWhereUniqueInput>;
};

export type ArtistUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ArtistUpdateInput;
  /** Unique document search */
  where: ArtistWhereUniqueInput;
};

export type ArtistUpsertInput = {
  /** Create document if it didn't exist */
  create: ArtistCreateInput;
  /** Update document if it exists */
  update: ArtistUpdateInput;
};

export type ArtistUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ArtistUpsertInput;
  /** Unique document search */
  where: ArtistWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ArtistWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ArtistWhereInput = {
// omitted for brevity
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ArtistWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ArtistWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ArtistWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ArtistWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ArtistWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Artist record uniquely */
export type ArtistWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  slug?: InputMaybe<Scalars['String']>;
};

/** Asset system model */
export type Asset = Node & {
  __typename?: 'Asset';
  cover_artRelease: Array<Release>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  /** The file name */
  fileName: Scalars['String'];
  flagArtist: Array<Artist>;
  /** The file handle */
  handle: Scalars['String'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']>;
  /** List of Asset versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>;
  pictureArtist: Array<Artist>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  /** The file size */
  size?: Maybe<Scalars['Float']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String'];
  /** The file width */
  width?: Maybe<Scalars['Float']>;
};

/** Asset system model */
export type AssetCover_ArtReleaseArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReleaseWhereInput>;
};

/** Asset system model */
export type AssetCreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};

/** Asset system model */
export type AssetCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Asset system model */
export type AssetDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

/** Asset system model */
export type AssetFlagArtistArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ArtistOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ArtistWhereInput>;
};

/** Asset system model */
export type AssetHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

/** Asset system model */
export type AssetLocalizationsArgs = {
  includeCurrent?: Scalars['Boolean'];
  locales?: Array<Locale>;
};

/** Asset system model */
export type AssetPictureArtistArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ArtistOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ArtistWhereInput>;
};

/** Asset system model */
export type AssetPublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};

/** Asset system model */
export type AssetPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Asset system model */
export type AssetScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};

/** Asset system model */
export type AssetUpdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};

/** Asset system model */
export type AssetUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Asset system model */
export type AssetUrlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: AssetWhereUniqueInput;
};

/** A connection to a list of items. */
export type AssetConnection = {
  __typename?: 'AssetConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type AssetCreateInput = {
  cover_artRelease?: InputMaybe<ReleaseCreateManyInlineInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fileName: Scalars['String'];
  flagArtist?: InputMaybe<ArtistCreateManyInlineInput>;
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  pictureArtist?: InputMaybe<ArtistCreateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  fileName: Scalars['String'];
  handle: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  __typename?: 'AssetEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Asset;
};

/** Identifies documents */
export type AssetManyWhereInput = {
 //omitted for brevity
};

export enum AssetOrderByInput {
  CreatedAtAsc = `createdAt_ASC`,
  CreatedAtDesc = `createdAt_DESC`,
  FileNameAsc = `fileName_ASC`,
  FileNameDesc = `fileName_DESC`,
  HandleAsc = `handle_ASC`,
  HandleDesc = `handle_DESC`,
  HeightAsc = `height_ASC`,
  HeightDesc = `height_DESC`,
  IdAsc = `id_ASC`,
  IdDesc = `id_DESC`,
  MimeTypeAsc = `mimeType_ASC`,
  MimeTypeDesc = `mimeType_DESC`,
  PublishedAtAsc = `publishedAt_ASC`,
  PublishedAtDesc = `publishedAt_DESC`,
  SizeAsc = `size_ASC`,
  SizeDesc = `size_DESC`,
  UpdatedAtAsc = `updatedAt_ASC`,
  UpdatedAtDesc = `updatedAt_DESC`,
  WidthAsc = `width_ASC`,
  WidthDesc = `width_DESC`,
}

/** Transformations for Assets */
export type AssetTransformationInput = {
  document?: InputMaybe<DocumentTransformationInput>;
  image?: InputMaybe<ImageTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateInput = {
  cover_artRelease?: InputMaybe<ReleaseUpdateManyInlineInput>;
  fileName?: InputMaybe<Scalars['String']>;
  flagArtist?: InputMaybe<ArtistUpdateManyInlineInput>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  pictureArtist?: InputMaybe<ArtistUpdateManyInlineInput>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  handle?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
};

export type AssetUpdateManyInlineInput = {
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  size?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: AssetUpdateManyInput;
  /** Document search */
  where: AssetWhereInput;
};

export type AssetUpdateOneInlineInput = {
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: AssetUpdateInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
  update: AssetUpdateLocalizationDataInput;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: AssetUpsertInput;
  /** Unique document search */
  where: AssetWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type AssetWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  cover_artRelease_every?: InputMaybe<ReleaseWhereInput>;
  cover_artRelease_none?: InputMaybe<ReleaseWhereInput>;
  cover_artRelease_some?: InputMaybe<ReleaseWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<AssetWhereStageInput>;
  documentInStages_none?: InputMaybe<AssetWhereStageInput>;
  documentInStages_some?: InputMaybe<AssetWhereStageInput>;
  fileName?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  fileName_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']>;
  flagArtist_every?: InputMaybe<ArtistWhereInput>;
  flagArtist_none?: InputMaybe<ArtistWhereInput>;
  flagArtist_some?: InputMaybe<ArtistWhereInput>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  height_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  mimeType_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']>;
  pictureArtist_every?: InputMaybe<ArtistWhereInput>;
  pictureArtist_none?: InputMaybe<ArtistWhereInput>;
  pictureArtist_some?: InputMaybe<ArtistWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  size?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  size_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  width?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']>;
  /** Any other value that exists and is not equal to the given value. */
  width_not?: InputMaybe<Scalars['Float']>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<InputMaybe<Scalars['Float']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type AssetWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<AssetWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type BatchPayload = {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  __typename?: 'Color';
  css: Scalars['String'];
  hex: Scalars['Hex'];
  rgba: Rgba;
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']>;
  rgba?: InputMaybe<RgbaInput>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']>;
};

export type Dashboard = Node & {
  __typename?: 'Dashboard';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Get the document in other stages */
  documentInStages: Array<Dashboard>;
  email?: Maybe<Scalars['String']>;
  /** List of Dashboard versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  is_signed_contract?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  picture?: Maybe<Scalars['String']>;
  project_name?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  responsable_name?: Maybe<Scalars['String']>;
  scheduledIn: Array<ScheduledOperation>;
  signature?: Maybe<Scalars['String']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  username?: Maybe<Scalars['String']>;
};

export type DashboardCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type DashboardDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

export type DashboardHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type DashboardPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type DashboardScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};

export type DashboardUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type DashboardConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: DashboardWhereUniqueInput;
};

/** A connection to a list of items. */
export type DashboardConnection = {
  __typename?: 'DashboardConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<DashboardEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type DashboardCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  email?: InputMaybe<Scalars['String']>;
  is_signed_contract?: InputMaybe<Scalars['Boolean']>;
  password?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  project_name?: InputMaybe<Scalars['String']>;
  responsable_name?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  username?: InputMaybe<Scalars['String']>;
};

export type DashboardCreateManyInlineInput = {
  /** Connect multiple existing Dashboard documents */
  connect?: InputMaybe<Array<DashboardWhereUniqueInput>>;
  /** Create and connect multiple existing Dashboard documents */
  create?: InputMaybe<Array<DashboardCreateInput>>;
};

export type DashboardCreateOneInlineInput = {
  /** Connect one existing Dashboard document */
  connect?: InputMaybe<DashboardWhereUniqueInput>;
  /** Create and connect one Dashboard document */
  create?: InputMaybe<DashboardCreateInput>;
};

/** An edge in a connection. */
export type DashboardEdge = {
  __typename?: 'DashboardEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Dashboard;
};

/** Identifies documents */
export type DashboardManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DashboardWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DashboardWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DashboardWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<DashboardWhereStageInput>;
  documentInStages_none?: InputMaybe<DashboardWhereStageInput>;
  documentInStages_some?: InputMaybe<DashboardWhereStageInput>;
  email?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  email_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  email_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  email_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  email_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  is_signed_contract?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  is_signed_contract_not?: InputMaybe<Scalars['Boolean']>;
  password?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  password_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  password_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  password_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  password_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  password_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  password_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  password_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  password_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  password_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  project_name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  project_name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  project_name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  project_name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  project_name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  project_name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  project_name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  project_name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  project_name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  project_name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  responsable_name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  responsable_name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  responsable_name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  responsable_name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  responsable_name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  responsable_name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  responsable_name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  responsable_name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  responsable_name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  responsable_name_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  signature?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  signature_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  signature_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  signature_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  signature_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  signature_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  signature_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  signature_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  signature_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  signature_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  username?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  username_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  username_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  username_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  username_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  username_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  username_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  username_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  username_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  username_starts_with?: InputMaybe<Scalars['String']>;
};

export enum DashboardOrderByInput {
  CreatedAtAsc = `createdAt_ASC`,
  CreatedAtDesc = `createdAt_DESC`,
  EmailAsc = `email_ASC`,
  EmailDesc = `email_DESC`,
  IdAsc = `id_ASC`,
  IdDesc = `id_DESC`,
  IsSignedContractAsc = `is_signed_contract_ASC`,
  IsSignedContractDesc = `is_signed_contract_DESC`,
  PasswordAsc = `password_ASC`,
  PasswordDesc = `password_DESC`,
  PictureAsc = `picture_ASC`,
  PictureDesc = `picture_DESC`,
  ProjectNameAsc = `project_name_ASC`,
  ProjectNameDesc = `project_name_DESC`,
  PublishedAtAsc = `publishedAt_ASC`,
  PublishedAtDesc = `publishedAt_DESC`,
  ResponsableNameAsc = `responsable_name_ASC`,
  ResponsableNameDesc = `responsable_name_DESC`,
  SignatureAsc = `signature_ASC`,
  SignatureDesc = `signature_DESC`,
  UpdatedAtAsc = `updatedAt_ASC`,
  UpdatedAtDesc = `updatedAt_DESC`,
  UsernameAsc = `username_ASC`,
  UsernameDesc = `username_DESC`,
}

export type DashboardUpdateInput = {
  email?: InputMaybe<Scalars['String']>;
  is_signed_contract?: InputMaybe<Scalars['Boolean']>;
  password?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  project_name?: InputMaybe<Scalars['String']>;
  responsable_name?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

export type DashboardUpdateManyInlineInput = {
  /** Connect multiple existing Dashboard documents */
  connect?: InputMaybe<Array<DashboardConnectInput>>;
  /** Create and connect multiple Dashboard documents */
  create?: InputMaybe<Array<DashboardCreateInput>>;
  /** Delete multiple Dashboard documents */
  delete?: InputMaybe<Array<DashboardWhereUniqueInput>>;
  /** Disconnect multiple Dashboard documents */
  disconnect?: InputMaybe<Array<DashboardWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Dashboard documents */
  set?: InputMaybe<Array<DashboardWhereUniqueInput>>;
  /** Update multiple Dashboard documents */
  update?: InputMaybe<Array<DashboardUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Dashboard documents */
  upsert?: InputMaybe<Array<DashboardUpsertWithNestedWhereUniqueInput>>;
};

export type DashboardUpdateManyInput = {
  email?: InputMaybe<Scalars['String']>;
  is_signed_contract?: InputMaybe<Scalars['Boolean']>;
  password?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  project_name?: InputMaybe<Scalars['String']>;
  responsable_name?: InputMaybe<Scalars['String']>;
  signature?: InputMaybe<Scalars['String']>;
};

export type DashboardUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: DashboardUpdateManyInput;
  /** Document search */
  where: DashboardWhereInput;
};

export type DashboardUpdateOneInlineInput = {
  /** Connect existing Dashboard document */
  connect?: InputMaybe<DashboardWhereUniqueInput>;
  /** Create and connect one Dashboard document */
  create?: InputMaybe<DashboardCreateInput>;
  /** Delete currently connected Dashboard document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Dashboard document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Dashboard document */
  update?: InputMaybe<DashboardUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Dashboard document */
  upsert?: InputMaybe<DashboardUpsertWithNestedWhereUniqueInput>;
};

export type DashboardUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: DashboardUpdateInput;
  /** Unique document search */
  where: DashboardWhereUniqueInput;
};

export type DashboardUpsertInput = {
  /** Create document if it didn't exist */
  create: DashboardCreateInput;
  /** Update document if it exists */
  update: DashboardUpdateInput;
};

export type DashboardUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: DashboardUpsertInput;
  /** Unique document search */
  where: DashboardWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type DashboardWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type DashboardWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DashboardWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DashboardWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DashboardWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  documentInStages_every?: InputMaybe<DashboardWhereStageInput>;
  documentInStages_none?: InputMaybe<DashboardWhereStageInput>;
  documentInStages_some?: InputMaybe<DashboardWhereStageInput>;
  email?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  email_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  email_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  email_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  email_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  is_signed_contract?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  is_signed_contract_not?: InputMaybe<Scalars['Boolean']>;
  password?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  password_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  password_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  password_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  password_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  password_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  password_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  password_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  password_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  password_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  project_name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  project_name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  project_name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  project_name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  project_name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  project_name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  project_name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  project_name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  project_name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  project_name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  responsable_name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  responsable_name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  responsable_name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  responsable_name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  responsable_name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  responsable_name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  responsable_name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  responsable_name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  responsable_name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  responsable_name_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  signature?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  signature_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  signature_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  signature_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  signature_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  signature_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  signature_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  signature_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  signature_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  signature_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  username?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  username_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  username_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  username_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  username_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  username_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  username_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  username_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  username_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  username_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type DashboardWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<DashboardWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<DashboardWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<DashboardWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<DashboardWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Dashboard record uniquely */
export type DashboardWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  username?: InputMaybe<Scalars['String']>;
};

export enum DocumentFileTypes {
  Doc = `doc`,
  Docx = `docx`,
  Html = `html`,
  Jpg = `jpg`,
  Odp = `odp`,
  Ods = `ods`,
  Odt = `odt`,
  Pdf = `pdf`,
  Png = `png`,
  Ppt = `ppt`,
  Pptx = `pptx`,
  Svg = `svg`,
  Txt = `txt`,
  Webp = `webp`,
  Xls = `xls`,
  Xlsx = `xlsx`,
}

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  __typename?: 'DocumentVersion';
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export enum ImageFit {
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  Clip = `clip`,
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  Crop = `crop`,
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  Max = `max`,
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  Scale = `scale`,
}

export type ImageResizeInput = {
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']>;
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']>;
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
};

/** Locale system enumeration */
export enum Locale {
  /** System locale */
  En = `en`,
}

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  __typename?: 'Location';
  distance: Scalars['Float'];
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};

/** Representing a geolocation point with latitude and longitude */
export type LocationDistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create one artist */
  createArtist?: Maybe<Artist>;
  /**
   * Create one asset
   * @deprecated Asset mutations will be overhauled soon
   */
  createAsset?: Maybe<Asset>;
  /** Create one dashboard */
  createDashboard?: Maybe<Dashboard>;
  /** Create one release */
  createRelease?: Maybe<Release>;
  /** Create one scheduledRelease */
  createScheduledRelease?: Maybe<ScheduledRelease>;
  /** Delete one artist from _all_ existing stages. Returns deleted document. */
  deleteArtist?: Maybe<Artist>;
  /** Delete one asset from _all_ existing stages. Returns deleted document. */
  deleteAsset?: Maybe<Asset>;
  /** Delete one dashboard from _all_ existing stages. Returns deleted document. */
  deleteDashboard?: Maybe<Dashboard>;
  /**
   * Delete many Artist documents
   * @deprecated Please use the new paginated many mutation (deleteManyArtistsConnection)
   */
  deleteManyArtists: BatchPayload;
  /** Delete many Artist documents, return deleted documents */
  deleteManyArtistsConnection: ArtistConnection;
  /**
   * Delete many Asset documents
   * @deprecated Please use the new paginated many mutation (deleteManyAssetsConnection)
   */
  deleteManyAssets: BatchPayload;
  /** Delete many Asset documents, return deleted documents */
  deleteManyAssetsConnection: AssetConnection;
  /**
   * Delete many Dashboard documents
   * @deprecated Please use the new paginated many mutation (deleteManyDashboardsConnection)
   */
  deleteManyDashboards: BatchPayload;
  /** Delete many Dashboard documents, return deleted documents */
  deleteManyDashboardsConnection: DashboardConnection;
  /**
   * Delete many Release documents
   * @deprecated Please use the new paginated many mutation (deleteManyReleasesConnection)
   */
  deleteManyReleases: BatchPayload;
  /** Delete many Release documents, return deleted documents */
  deleteManyReleasesConnection: ReleaseConnection;
  /** Delete one release from _all_ existing stages. Returns deleted document. */
  deleteRelease?: Maybe<Release>;
  /** Delete and return scheduled operation */
  deleteScheduledOperation?: Maybe<ScheduledOperation>;
  /** Delete one scheduledRelease from _all_ existing stages. Returns deleted document. */
  deleteScheduledRelease?: Maybe<ScheduledRelease>;
  /** Publish one artist */
  publishArtist?: Maybe<Artist>;
  /** Publish one asset */
  publishAsset?: Maybe<Asset>;
  /** Publish one dashboard */
  publishDashboard?: Maybe<Dashboard>;
  /**
   * Publish many Artist documents
   * @deprecated Please use the new paginated many mutation (publishManyArtistsConnection)
   */
  publishManyArtists: BatchPayload;
  /** Publish many Artist documents */
  publishManyArtistsConnection: ArtistConnection;
  /**
   * Publish many Asset documents
   * @deprecated Please use the new paginated many mutation (publishManyAssetsConnection)
   */
  publishManyAssets: BatchPayload;
  /** Publish many Asset documents */
  publishManyAssetsConnection: AssetConnection;
  /**
   * Publish many Dashboard documents
   * @deprecated Please use the new paginated many mutation (publishManyDashboardsConnection)
   */
  publishManyDashboards: BatchPayload;
  /** Publish many Dashboard documents */
  publishManyDashboardsConnection: DashboardConnection;
  /**
   * Publish many Release documents
   * @deprecated Please use the new paginated many mutation (publishManyReleasesConnection)
   */
  publishManyReleases: BatchPayload;
  /** Publish many Release documents */
  publishManyReleasesConnection: ReleaseConnection;
  /** Publish one release */
  publishRelease?: Maybe<Release>;
  /** Schedule to publish one artist */
  schedulePublishArtist?: Maybe<Artist>;
  /** Schedule to publish one asset */
  schedulePublishAsset?: Maybe<Asset>;
  /** Schedule to publish one dashboard */
  schedulePublishDashboard?: Maybe<Dashboard>;
  /** Schedule to publish one release */
  schedulePublishRelease?: Maybe<Release>;
  /** Unpublish one artist from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishArtist?: Maybe<Artist>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishAsset?: Maybe<Asset>;
  /** Unpublish one dashboard from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishDashboard?: Maybe<Dashboard>;
  /** Unpublish one release from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  scheduleUnpublishRelease?: Maybe<Release>;
  /** Unpublish one artist from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishArtist?: Maybe<Artist>;
  /** Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishAsset?: Maybe<Asset>;
  /** Unpublish one dashboard from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishDashboard?: Maybe<Dashboard>;
  /**
   * Unpublish many Artist documents
   * @deprecated Please use the new paginated many mutation (unpublishManyArtistsConnection)
   */
  unpublishManyArtists: BatchPayload;
  /** Find many Artist documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyArtistsConnection: ArtistConnection;
  /**
   * Unpublish many Asset documents
   * @deprecated Please use the new paginated many mutation (unpublishManyAssetsConnection)
   */
  unpublishManyAssets: BatchPayload;
  /** Find many Asset documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyAssetsConnection: AssetConnection;
  /**
   * Unpublish many Dashboard documents
   * @deprecated Please use the new paginated many mutation (unpublishManyDashboardsConnection)
   */
  unpublishManyDashboards: BatchPayload;
  /** Find many Dashboard documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyDashboardsConnection: DashboardConnection;
  /**
   * Unpublish many Release documents
   * @deprecated Please use the new paginated many mutation (unpublishManyReleasesConnection)
   */
  unpublishManyReleases: BatchPayload;
  /** Find many Release documents that match criteria in specified stage and unpublish from target stages */
  unpublishManyReleasesConnection: ReleaseConnection;
  /** Unpublish one release from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only. */
  unpublishRelease?: Maybe<Release>;
  /** Update one artist */
  updateArtist?: Maybe<Artist>;
  /** Update one asset */
  updateAsset?: Maybe<Asset>;
  /** Update one dashboard */
  updateDashboard?: Maybe<Dashboard>;
  /**
   * Update many artists
   * @deprecated Please use the new paginated many mutation (updateManyArtistsConnection)
   */
  updateManyArtists: BatchPayload;
  /** Update many Artist documents */
  updateManyArtistsConnection: ArtistConnection;
  /**
   * Update many assets
   * @deprecated Please use the new paginated many mutation (updateManyAssetsConnection)
   */
  updateManyAssets: BatchPayload;
  /** Update many Asset documents */
  updateManyAssetsConnection: AssetConnection;
  /**
   * Update many dashboards
   * @deprecated Please use the new paginated many mutation (updateManyDashboardsConnection)
   */
  updateManyDashboards: BatchPayload;
  /** Update many Dashboard documents */
  updateManyDashboardsConnection: DashboardConnection;
  /**
   * Update many releases
   * @deprecated Please use the new paginated many mutation (updateManyReleasesConnection)
   */
  updateManyReleases: BatchPayload;
  /** Update many Release documents */
  updateManyReleasesConnection: ReleaseConnection;
  /** Update one release */
  updateRelease?: Maybe<Release>;
  /** Update one scheduledRelease */
  updateScheduledRelease?: Maybe<ScheduledRelease>;
  /** Upsert one artist */
  upsertArtist?: Maybe<Artist>;
  /** Upsert one asset */
  upsertAsset?: Maybe<Asset>;
  /** Upsert one dashboard */
  upsertDashboard?: Maybe<Dashboard>;
  /** Upsert one release */
  upsertRelease?: Maybe<Release>;
};

export type MutationCreateArtistArgs = {
  data: ArtistCreateInput;
};

export type MutationCreateAssetArgs = {
  data: AssetCreateInput;
};

export type MutationCreateDashboardArgs = {
  data: DashboardCreateInput;
};

export type MutationCreateReleaseArgs = {
  data: ReleaseCreateInput;
};

export type MutationCreateScheduledReleaseArgs = {
  data: ScheduledReleaseCreateInput;
};

export type MutationDeleteArtistArgs = {
  where: ArtistWhereUniqueInput;
};

export type MutationDeleteAssetArgs = {
  where: AssetWhereUniqueInput;
};

export type MutationDeleteDashboardArgs = {
  where: DashboardWhereUniqueInput;
};

export type MutationDeleteManyArtistsArgs = {
  where?: InputMaybe<ArtistManyWhereInput>;
};

export type MutationDeleteManyArtistsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ArtistManyWhereInput>;
};

export type MutationDeleteManyAssetsArgs = {
  where?: InputMaybe<AssetManyWhereInput>;
};

export type MutationDeleteManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};

export type MutationDeleteManyDashboardsArgs = {
  where?: InputMaybe<DashboardManyWhereInput>;
};

export type MutationDeleteManyDashboardsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DashboardManyWhereInput>;
};

export type MutationDeleteManyReleasesArgs = {
  where?: InputMaybe<ReleaseManyWhereInput>;
};

export type MutationDeleteManyReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReleaseManyWhereInput>;
};

export type MutationDeleteReleaseArgs = {
  where: ReleaseWhereUniqueInput;
};

export type MutationDeleteScheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
};

export type MutationDeleteScheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
};

export type MutationPublishArtistArgs = {
  to?: Array<Stage>;
  where: ArtistWhereUniqueInput;
};

export type MutationPublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};

export type MutationPublishDashboardArgs = {
  to?: Array<Stage>;
  where: DashboardWhereUniqueInput;
};

export type MutationPublishManyArtistsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ArtistManyWhereInput>;
};

export type MutationPublishManyArtistsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ArtistManyWhereInput>;
};

export type MutationPublishManyAssetsArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};

export type MutationPublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<AssetManyWhereInput>;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};

export type MutationPublishManyDashboardsArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<DashboardManyWhereInput>;
};

export type MutationPublishManyDashboardsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<DashboardManyWhereInput>;
};

export type MutationPublishManyReleasesArgs = {
  to?: Array<Stage>;
  where?: InputMaybe<ReleaseManyWhereInput>;
};

export type MutationPublishManyReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: InputMaybe<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  to?: Array<Stage>;
  where?: InputMaybe<ReleaseManyWhereInput>;
};

export type MutationPublishReleaseArgs = {
  to?: Array<Stage>;
  where: ReleaseWhereUniqueInput;
};

export type MutationSchedulePublishArtistArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ArtistWhereUniqueInput;
};

export type MutationSchedulePublishAssetArgs = {
  locales?: InputMaybe<Array<Locale>>;
  publishBase?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: AssetWhereUniqueInput;
  withDefaultLocale?: InputMaybe<Scalars['Boolean']>;
};

export type MutationSchedulePublishDashboardArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: DashboardWhereUniqueInput;
};

export type MutationSchedulePublishReleaseArgs = {
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  to?: Array<Stage>;
  where: ReleaseWhereUniqueInput;
};

export type MutationScheduleUnpublishArtistArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ArtistWhereUniqueInput;
};

export type MutationScheduleUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};

export type MutationScheduleUnpublishDashboardArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: DashboardWhereUniqueInput;
};

export type MutationScheduleUnpublishReleaseArgs = {
  from?: Array<Stage>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  releaseId?: InputMaybe<Scalars['String']>;
  where: ReleaseWhereUniqueInput;
};

export type MutationUnpublishArtistArgs = {
  from?: Array<Stage>;
  where: ArtistWhereUniqueInput;
};

export type MutationUnpublishAssetArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where: AssetWhereUniqueInput;
};

export type MutationUnpublishDashboardArgs = {
  from?: Array<Stage>;
  where: DashboardWhereUniqueInput;
};

export type MutationUnpublishManyArtistsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ArtistManyWhereInput>;
};

export type MutationUnpublishManyArtistsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ArtistManyWhereInput>;
};

export type MutationUnpublishManyAssetsArgs = {
  from?: Array<Stage>;
  locales?: InputMaybe<Array<Locale>>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};

export type MutationUnpublishManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  unpublishBase?: InputMaybe<Scalars['Boolean']>;
  where?: InputMaybe<AssetManyWhereInput>;
};

export type MutationUnpublishManyDashboardsArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<DashboardManyWhereInput>;
};

export type MutationUnpublishManyDashboardsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<DashboardManyWhereInput>;
};

export type MutationUnpublishManyReleasesArgs = {
  from?: Array<Stage>;
  where?: InputMaybe<ReleaseManyWhereInput>;
};

export type MutationUnpublishManyReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  first?: InputMaybe<Scalars['Int']>;
  from?: Array<Stage>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: InputMaybe<Stage>;
  where?: InputMaybe<ReleaseManyWhereInput>;
};

export type MutationUnpublishReleaseArgs = {
  from?: Array<Stage>;
  where: ReleaseWhereUniqueInput;
};

export type MutationUpdateArtistArgs = {
  data: ArtistUpdateInput;
  where: ArtistWhereUniqueInput;
};

export type MutationUpdateAssetArgs = {
  data: AssetUpdateInput;
  where: AssetWhereUniqueInput;
};

export type MutationUpdateDashboardArgs = {
  data: DashboardUpdateInput;
  where: DashboardWhereUniqueInput;
};

export type MutationUpdateManyArtistsArgs = {
  data: ArtistUpdateManyInput;
  where?: InputMaybe<ArtistManyWhereInput>;
};

export type MutationUpdateManyArtistsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ArtistUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ArtistManyWhereInput>;
};

export type MutationUpdateManyAssetsArgs = {
  data: AssetUpdateManyInput;
  where?: InputMaybe<AssetManyWhereInput>;
};

export type MutationUpdateManyAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: AssetUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetManyWhereInput>;
};

export type MutationUpdateManyDashboardsArgs = {
  data: DashboardUpdateManyInput;
  where?: InputMaybe<DashboardManyWhereInput>;
};

export type MutationUpdateManyDashboardsConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: DashboardUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DashboardManyWhereInput>;
};

export type MutationUpdateManyReleasesArgs = {
  data: ReleaseUpdateManyInput;
  where?: InputMaybe<ReleaseManyWhereInput>;
};

export type MutationUpdateManyReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['ID']>;
  before?: InputMaybe<Scalars['ID']>;
  data: ReleaseUpdateManyInput;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReleaseManyWhereInput>;
};

export type MutationUpdateReleaseArgs = {
  data: ReleaseUpdateInput;
  where: ReleaseWhereUniqueInput;
};

export type MutationUpdateScheduledReleaseArgs = {
  data: ScheduledReleaseUpdateInput;
  where: ScheduledReleaseWhereUniqueInput;
};

export type MutationUpsertArtistArgs = {
  upsert: ArtistUpsertInput;
  where: ArtistWhereUniqueInput;
};

export type MutationUpsertAssetArgs = {
  upsert: AssetUpsertInput;
  where: AssetWhereUniqueInput;
};

export type MutationUpsertDashboardArgs = {
  upsert: DashboardUpsertInput;
  where: DashboardWhereUniqueInput;
};

export type MutationUpsertReleaseArgs = {
  upsert: ReleaseUpsertInput;
  where: ReleaseWhereUniqueInput;
};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Stage;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>;
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  __typename?: 'Query';
  /** Retrieve a single artist */
  artist?: Maybe<Artist>;
  /** Retrieve document version */
  artistVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple artists */
  artists: Array<Artist>;
  /** Retrieve multiple artists using the Relay connection interface */
  artistsConnection: ArtistConnection;
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve a single dashboard */
  dashboard?: Maybe<Dashboard>;
  /** Retrieve document version */
  dashboardVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple dashboards */
  dashboards: Array<Dashboard>;
  /** Retrieve multiple dashboards using the Relay connection interface */
  dashboardsConnection: DashboardConnection;
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve a single release */
  release?: Maybe<Release>;
  /** Retrieve document version */
  releaseVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple releases */
  releases: Array<Release>;
  /** Retrieve multiple releases using the Relay connection interface */
  releasesConnection: ReleaseConnection;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
};

export type QueryArtistArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ArtistWhereUniqueInput;
};

export type QueryArtistVersionArgs = {
  where: VersionWhereInput;
};

export type QueryArtistsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ArtistOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ArtistWhereInput>;
};

export type QueryArtistsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ArtistOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ArtistWhereInput>;
};

export type QueryAssetArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: AssetWhereUniqueInput;
};

export type QueryAssetVersionArgs = {
  where: VersionWhereInput;
};

export type QueryAssetsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};

export type QueryAssetsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<AssetWhereInput>;
};

export type QueryDashboardArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: DashboardWhereUniqueInput;
};

export type QueryDashboardVersionArgs = {
  where: VersionWhereInput;
};

export type QueryDashboardsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DashboardOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<DashboardWhereInput>;
};

export type QueryDashboardsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<DashboardOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<DashboardWhereInput>;
};

export type QueryNodeArgs = {
  id: Scalars['ID'];
  locales?: Array<Locale>;
  stage?: Stage;
};

export type QueryReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ReleaseWhereUniqueInput;
};

export type QueryReleaseVersionArgs = {
  where: VersionWhereInput;
};

export type QueryReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ReleaseWhereInput>;
};

export type QueryReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ReleaseWhereInput>;
};

export type QueryScheduledOperationArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledOperationWhereUniqueInput;
};

export type QueryScheduledOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};

export type QueryScheduledOperationsConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};

export type QueryScheduledReleaseArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: ScheduledReleaseWhereUniqueInput;
};

export type QueryScheduledReleasesArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};

export type QueryScheduledReleasesConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<ScheduledReleaseWhereInput>;
};

export type QueryUserArgs = {
  locales?: Array<Locale>;
  stage?: Stage;
  where: UserWhereUniqueInput;
};

export type QueryUsersArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};

export type QueryUsersConnectionArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: Array<Locale>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  where?: InputMaybe<UserWhereInput>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type Rgba = {
  __typename?: 'RGBA';
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RgbaInput = {
  a: Scalars['RGBATransparency'];
  b: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  r: Scalars['RGBAHue'];
};

/** Musics released by label */
export type Release = Node & {
  __typename?: 'Release';
  apple_link?: Maybe<Scalars['String']>;
  artist: Scalars['String'];
  buy_link: Scalars['String'];
  cover_art: Asset;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  deezer_link?: Maybe<Scalars['String']>;
  description: Scalars['String'];
  /** Get the document in other stages */
  documentInStages: Array<Release>;
  /** List of Release versions */
  history: Array<Version>;
  /** The unique identifier */
  id: Scalars['ID'];
  iframe_sc: Scalars['String'];
  music_name: Scalars['String'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  release_date: Scalars['Date'];
  release_number: Scalars['Int'];
  sc_link: Scalars['String'];
  scheduledIn: Array<ScheduledOperation>;
  slug: Scalars['String'];
  sptfy_link: Scalars['String'];
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  yt_link: Scalars['String'];
};

/** Musics released by label */
export type ReleaseCover_ArtArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Musics released by label */
export type ReleaseCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Musics released by label */
export type ReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

/** Musics released by label */
export type ReleaseHistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

/** Musics released by label */
export type ReleasePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Musics released by label */
export type ReleaseScheduledInArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};

/** Musics released by label */
export type ReleaseUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ReleaseConnection = {
  __typename?: 'ReleaseConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ReleaseCreateInput = {
  apple_link?: InputMaybe<Scalars['String']>;
  artist: Scalars['String'];
  buy_link: Scalars['String'];
  cover_art: AssetCreateOneInlineInput;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  deezer_link?: InputMaybe<Scalars['String']>;
  description: Scalars['String'];
  iframe_sc: Scalars['String'];
  music_name: Scalars['String'];
  release_date: Scalars['Date'];
  release_number: Scalars['Int'];
  sc_link: Scalars['String'];
  slug: Scalars['String'];
  sptfy_link: Scalars['String'];
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  yt_link: Scalars['String'];
};

export type ReleaseCreateManyInlineInput = {
  /** Connect multiple existing Release documents */
  connect?: InputMaybe<Array<ReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing Release documents */
  create?: InputMaybe<Array<ReleaseCreateInput>>;
};

export type ReleaseCreateOneInlineInput = {
  /** Connect one existing Release document */
  connect?: InputMaybe<ReleaseWhereUniqueInput>;
  /** Create and connect one Release document */
  create?: InputMaybe<ReleaseCreateInput>;
};

/** An edge in a connection. */
export type ReleaseEdge = {
  __typename?: 'ReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Release;
};

/** Identifies documents */
export type ReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  apple_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  apple_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  apple_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  apple_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  apple_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  apple_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  apple_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  apple_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  apple_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  apple_link_starts_with?: InputMaybe<Scalars['String']>;
  artist?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  artist_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  artist_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  artist_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  artist_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  artist_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  artist_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  artist_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  artist_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  artist_starts_with?: InputMaybe<Scalars['String']>;
  buy_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buy_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buy_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buy_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buy_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buy_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buy_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buy_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buy_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buy_link_starts_with?: InputMaybe<Scalars['String']>;
  cover_art?: InputMaybe<AssetWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  deezer_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  deezer_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  deezer_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  deezer_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  deezer_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  deezer_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  deezer_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  deezer_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  deezer_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  deezer_link_starts_with?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<ReleaseWhereStageInput>;
  documentInStages_none?: InputMaybe<ReleaseWhereStageInput>;
  documentInStages_some?: InputMaybe<ReleaseWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  iframe_sc?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iframe_sc_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iframe_sc_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iframe_sc_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iframe_sc_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iframe_sc_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iframe_sc_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iframe_sc_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iframe_sc_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iframe_sc_starts_with?: InputMaybe<Scalars['String']>;
  music_name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  music_name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  music_name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  music_name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  music_name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  music_name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  music_name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  music_name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  music_name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  music_name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release_date?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  release_date_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  release_date_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  release_date_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  release_date_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  release_date_lte?: InputMaybe<Scalars['Date']>;
  /** Any other value that exists and is not equal to the given value. */
  release_date_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  release_date_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  release_number?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  release_number_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  release_number_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  release_number_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  release_number_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  release_number_lte?: InputMaybe<Scalars['Int']>;
  /** Any other value that exists and is not equal to the given value. */
  release_number_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  release_number_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  sc_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sc_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sc_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sc_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  sc_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sc_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  sc_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sc_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  sc_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sc_link_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  sptfy_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sptfy_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sptfy_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sptfy_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  sptfy_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sptfy_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  sptfy_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sptfy_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  sptfy_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sptfy_link_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  yt_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  yt_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  yt_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  yt_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  yt_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  yt_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  yt_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  yt_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  yt_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  yt_link_starts_with?: InputMaybe<Scalars['String']>;
};

export enum ReleaseOrderByInput {
  AppleLinkAsc = `apple_link_ASC`,
  AppleLinkDesc = `apple_link_DESC`,
  ArtistAsc = `artist_ASC`,
  ArtistDesc = `artist_DESC`,
  BuyLinkAsc = `buy_link_ASC`,
  BuyLinkDesc = `buy_link_DESC`,
  CreatedAtAsc = `createdAt_ASC`,
  CreatedAtDesc = `createdAt_DESC`,
  DeezerLinkAsc = `deezer_link_ASC`,
  DeezerLinkDesc = `deezer_link_DESC`,
  DescriptionAsc = `description_ASC`,
  DescriptionDesc = `description_DESC`,
  IdAsc = `id_ASC`,
  IdDesc = `id_DESC`,
  IframeScAsc = `iframe_sc_ASC`,
  IframeScDesc = `iframe_sc_DESC`,
  MusicNameAsc = `music_name_ASC`,
  MusicNameDesc = `music_name_DESC`,
  PublishedAtAsc = `publishedAt_ASC`,
  PublishedAtDesc = `publishedAt_DESC`,
  ReleaseDateAsc = `release_date_ASC`,
  ReleaseDateDesc = `release_date_DESC`,
  ReleaseNumberAsc = `release_number_ASC`,
  ReleaseNumberDesc = `release_number_DESC`,
  ScLinkAsc = `sc_link_ASC`,
  ScLinkDesc = `sc_link_DESC`,
  SlugAsc = `slug_ASC`,
  SlugDesc = `slug_DESC`,
  SptfyLinkAsc = `sptfy_link_ASC`,
  SptfyLinkDesc = `sptfy_link_DESC`,
  UpdatedAtAsc = `updatedAt_ASC`,
  UpdatedAtDesc = `updatedAt_DESC`,
  YtLinkAsc = `yt_link_ASC`,
  YtLinkDesc = `yt_link_DESC`,
}

export type ReleaseUpdateInput = {
  apple_link?: InputMaybe<Scalars['String']>;
  artist?: InputMaybe<Scalars['String']>;
  buy_link?: InputMaybe<Scalars['String']>;
  cover_art?: InputMaybe<AssetUpdateOneInlineInput>;
  deezer_link?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  iframe_sc?: InputMaybe<Scalars['String']>;
  music_name?: InputMaybe<Scalars['String']>;
  release_date?: InputMaybe<Scalars['Date']>;
  release_number?: InputMaybe<Scalars['Int']>;
  sc_link?: InputMaybe<Scalars['String']>;
  slug?: InputMaybe<Scalars['String']>;
  sptfy_link?: InputMaybe<Scalars['String']>;
  yt_link?: InputMaybe<Scalars['String']>;
};

export type ReleaseUpdateManyInlineInput = {
  /** Connect multiple existing Release documents */
  connect?: InputMaybe<Array<ReleaseConnectInput>>;
  /** Create and connect multiple Release documents */
  create?: InputMaybe<Array<ReleaseCreateInput>>;
  /** Delete multiple Release documents */
  delete?: InputMaybe<Array<ReleaseWhereUniqueInput>>;
  /** Disconnect multiple Release documents */
  disconnect?: InputMaybe<Array<ReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing Release documents */
  set?: InputMaybe<Array<ReleaseWhereUniqueInput>>;
  /** Update multiple Release documents */
  update?: InputMaybe<Array<ReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Release documents */
  upsert?: InputMaybe<Array<ReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ReleaseUpdateManyInput = {
  apple_link?: InputMaybe<Scalars['String']>;
  artist?: InputMaybe<Scalars['String']>;
  buy_link?: InputMaybe<Scalars['String']>;
  deezer_link?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  iframe_sc?: InputMaybe<Scalars['String']>;
  music_name?: InputMaybe<Scalars['String']>;
  release_date?: InputMaybe<Scalars['Date']>;
  sc_link?: InputMaybe<Scalars['String']>;
  sptfy_link?: InputMaybe<Scalars['String']>;
  yt_link?: InputMaybe<Scalars['String']>;
};

export type ReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ReleaseUpdateManyInput;
  /** Document search */
  where: ReleaseWhereInput;
};

export type ReleaseUpdateOneInlineInput = {
  /** Connect existing Release document */
  connect?: InputMaybe<ReleaseWhereUniqueInput>;
  /** Create and connect one Release document */
  create?: InputMaybe<ReleaseCreateInput>;
  /** Delete currently connected Release document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected Release document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single Release document */
  update?: InputMaybe<ReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Release document */
  upsert?: InputMaybe<ReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ReleaseUpdateInput;
  /** Unique document search */
  where: ReleaseWhereUniqueInput;
};

export type ReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ReleaseCreateInput;
  /** Update document if it exists */
  update: ReleaseUpdateInput;
};

export type ReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ReleaseUpsertInput;
  /** Unique document search */
  where: ReleaseWhereUniqueInput;
};

/** This contains a set of filters that can be used to compare values internally */
export type ReleaseWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  apple_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  apple_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  apple_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  apple_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  apple_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  apple_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  apple_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  apple_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  apple_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  apple_link_starts_with?: InputMaybe<Scalars['String']>;
  artist?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  artist_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  artist_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  artist_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  artist_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  artist_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  artist_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  artist_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  artist_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  artist_starts_with?: InputMaybe<Scalars['String']>;
  buy_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  buy_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  buy_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  buy_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  buy_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  buy_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  buy_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  buy_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  buy_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  buy_link_starts_with?: InputMaybe<Scalars['String']>;
  cover_art?: InputMaybe<AssetWhereInput>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  deezer_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  deezer_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  deezer_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  deezer_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  deezer_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  deezer_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  deezer_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  deezer_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  deezer_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  deezer_link_starts_with?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  documentInStages_every?: InputMaybe<ReleaseWhereStageInput>;
  documentInStages_none?: InputMaybe<ReleaseWhereStageInput>;
  documentInStages_some?: InputMaybe<ReleaseWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  iframe_sc?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  iframe_sc_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  iframe_sc_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  iframe_sc_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  iframe_sc_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  iframe_sc_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  iframe_sc_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  iframe_sc_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  iframe_sc_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  iframe_sc_starts_with?: InputMaybe<Scalars['String']>;
  music_name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  music_name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  music_name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  music_name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  music_name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  music_name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  music_name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  music_name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  music_name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  music_name_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release_date?: InputMaybe<Scalars['Date']>;
  /** All values greater than the given value. */
  release_date_gt?: InputMaybe<Scalars['Date']>;
  /** All values greater than or equal the given value. */
  release_date_gte?: InputMaybe<Scalars['Date']>;
  /** All values that are contained in given list. */
  release_date_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  /** All values less than the given value. */
  release_date_lt?: InputMaybe<Scalars['Date']>;
  /** All values less than or equal the given value. */
  release_date_lte?: InputMaybe<Scalars['Date']>;
  /** Any other value that exists and is not equal to the given value. */
  release_date_not?: InputMaybe<Scalars['Date']>;
  /** All values that are not contained in given list. */
  release_date_not_in?: InputMaybe<Array<InputMaybe<Scalars['Date']>>>;
  release_number?: InputMaybe<Scalars['Int']>;
  /** All values greater than the given value. */
  release_number_gt?: InputMaybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  release_number_gte?: InputMaybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  release_number_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  /** All values less than the given value. */
  release_number_lt?: InputMaybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  release_number_lte?: InputMaybe<Scalars['Int']>;
  /** Any other value that exists and is not equal to the given value. */
  release_number_not?: InputMaybe<Scalars['Int']>;
  /** All values that are not contained in given list. */
  release_number_not_in?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  sc_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sc_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sc_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sc_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  sc_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sc_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  sc_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sc_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  sc_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sc_link_starts_with?: InputMaybe<Scalars['String']>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  slug?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  slug_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  slug_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  slug_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  slug_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  slug_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  slug_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  slug_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  slug_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  slug_starts_with?: InputMaybe<Scalars['String']>;
  sptfy_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  sptfy_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  sptfy_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sptfy_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  sptfy_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  sptfy_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  sptfy_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  sptfy_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  sptfy_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  sptfy_link_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
  yt_link?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  yt_link_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  yt_link_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  yt_link_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  yt_link_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  yt_link_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  yt_link_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  yt_link_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  yt_link_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  yt_link_starts_with?: InputMaybe<Scalars['String']>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type ReleaseWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ReleaseWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ReleaseWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ReleaseWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<ReleaseWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References Release record uniquely */
export type ReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  release_number?: InputMaybe<Scalars['Int']>;
  slug?: InputMaybe<Scalars['String']>;
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  __typename?: 'RichText';
  /** Returns HTMl representation */
  html: Scalars['String'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** Returns AST representation */
  raw: Scalars['RichTextAST'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};

/** Scheduled Operation system model */
export type ScheduledOperation = Node & {
  __typename?: 'ScheduledOperation';
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Operation description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json'];
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** System stage field */
  stage: Stage;
  /** operation Status */
  status: ScheduledOperationStatus;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};

/** Scheduled Operation system model */
export type ScheduledOperationAffectedDocumentsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  skip?: InputMaybe<Scalars['Int']>;
};

/** Scheduled Operation system model */
export type ScheduledOperationCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Scheduled Operation system model */
export type ScheduledOperationDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

/** Scheduled Operation system model */
export type ScheduledOperationPublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Scheduled Operation system model */
export type ScheduledOperationReleaseArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Scheduled Operation system model */
export type ScheduledOperationUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument =
  | Artist
  | Asset
  | Dashboard
  | Release;

export type ScheduledOperationConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  __typename?: 'ScheduledOperationConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  __typename?: 'ScheduledOperationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledOperation;
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledOperationOrderByInput {
  CreatedAtAsc = `createdAt_ASC`,
  CreatedAtDesc = `createdAt_DESC`,
  DescriptionAsc = `description_ASC`,
  DescriptionDesc = `description_DESC`,
  ErrorMessageAsc = `errorMessage_ASC`,
  ErrorMessageDesc = `errorMessage_DESC`,
  IdAsc = `id_ASC`,
  IdDesc = `id_DESC`,
  PublishedAtAsc = `publishedAt_ASC`,
  PublishedAtDesc = `publishedAt_DESC`,
  StatusAsc = `status_ASC`,
  StatusDesc = `status_DESC`,
  UpdatedAtAsc = `updatedAt_ASC`,
  UpdatedAtDesc = `updatedAt_DESC`,
}

/** System Scheduled Operation Status */
export enum ScheduledOperationStatus {
  Canceled = `CANCELED`,
  Completed = `COMPLETED`,
  Failed = `FAILED`,
  InProgress = `IN_PROGRESS`,
  Pending = `PENDING`,
}

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  /** All values containing the given json path. */
  rawPayload_json_path_exists?: InputMaybe<Scalars['String']>;
  /**
   * Recursively tries to find the provided JSON scalar value inside the field.
   * It does use an exact match when comparing values.
   * If you pass `null` as value the filter will be ignored.
   * Note: This filter fails if you try to look for a non scalar JSON value!
   */
  rawPayload_value_recursive?: InputMaybe<Scalars['Json']>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledOperationStatus>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Node & {
  __typename?: 'ScheduledRelease';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** Release description */
  description?: Maybe<Scalars['String']>;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean'];
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** Release Status */
  status: ScheduledReleaseStatus;
  /** Release Title */
  title?: Maybe<Scalars['String']>;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
};

/** Scheduled Release system model */
export type ScheduledReleaseCreatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Scheduled Release system model */
export type ScheduledReleaseDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

/** Scheduled Release system model */
export type ScheduledReleaseOperationsArgs = {
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ScheduledOperationWhereInput>;
};

/** Scheduled Release system model */
export type ScheduledReleasePublishedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

/** Scheduled Release system model */
export type ScheduledReleaseUpdatedByArgs = {
  forceParentLocale?: InputMaybe<Scalars['Boolean']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  __typename?: 'ScheduledReleaseConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  __typename?: 'ScheduledReleaseEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: ScheduledRelease;
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

export enum ScheduledReleaseOrderByInput {
  CreatedAtAsc = `createdAt_ASC`,
  CreatedAtDesc = `createdAt_DESC`,
  DescriptionAsc = `description_ASC`,
  DescriptionDesc = `description_DESC`,
  ErrorMessageAsc = `errorMessage_ASC`,
  ErrorMessageDesc = `errorMessage_DESC`,
  IdAsc = `id_ASC`,
  IdDesc = `id_DESC`,
  IsActiveAsc = `isActive_ASC`,
  IsActiveDesc = `isActive_DESC`,
  IsImplicitAsc = `isImplicit_ASC`,
  IsImplicitDesc = `isImplicit_DESC`,
  PublishedAtAsc = `publishedAt_ASC`,
  PublishedAtDesc = `publishedAt_DESC`,
  ReleaseAtAsc = `releaseAt_ASC`,
  ReleaseAtDesc = `releaseAt_DESC`,
  StatusAsc = `status_ASC`,
  StatusDesc = `status_DESC`,
  TitleAsc = `title_ASC`,
  TitleDesc = `title_DESC`,
  UpdatedAtAsc = `updatedAt_ASC`,
  UpdatedAtDesc = `updatedAt_DESC`,
}

/** System Scheduled Release Status */
export enum ScheduledReleaseStatus {
  Completed = `COMPLETED`,
  Failed = `FAILED`,
  InProgress = `IN_PROGRESS`,
  Pending = `PENDING`,
}

export type ScheduledReleaseUpdateInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
  /** Document search */
  where: ScheduledReleaseWhereInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  createdBy?: InputMaybe<UserWhereInput>;
  description?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  publishedBy?: InputMaybe<UserWhereInput>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  /** Any other value that exists and is not equal to the given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<InputMaybe<ScheduledReleaseStatus>>>;
  title?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedBy?: InputMaybe<UserWhereInput>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Stage system enumeration */
export enum Stage {
  /** The Draft is the default stage for all your content. */
  Draft = `DRAFT`,
  /** The Published stage is where you can publish your content to. */
  Published = `PUBLISHED`,
}

export enum SystemDateTimeFieldVariation {
  Base = `BASE`,
  Combined = `COMBINED`,
  Localization = `LOCALIZATION`,
}

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Node & {
  __typename?: 'User';
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
  /** The username */
  name: Scalars['String'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']>;
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** System stage field */
  stage: Stage;
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
};

/** User system model */
export type UserDocumentInStagesArgs = {
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
  stages?: Array<Stage>;
};

export type UserConnectInput = {
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
  /** Document to connect */
  where: UserWhereUniqueInput;
};

/** A connection to a list of items. */
export type UserConnection = {
  __typename?: 'UserConnection';
  aggregate: Aggregate;
  /** A list of edges. */
  edges: Array<UserEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  __typename?: 'UserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: User;
};

/** System User Kind */
export enum UserKind {
  Member = `MEMBER`,
  Pat = `PAT`,
  Public = `PUBLIC`,
  Webhook = `WEBHOOK`,
}

/** Identifies documents */
export type UserManyWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

export enum UserOrderByInput {
  CreatedAtAsc = `createdAt_ASC`,
  CreatedAtDesc = `createdAt_DESC`,
  IdAsc = `id_ASC`,
  IdDesc = `id_DESC`,
  IsActiveAsc = `isActive_ASC`,
  IsActiveDesc = `isActive_DESC`,
  KindAsc = `kind_ASC`,
  KindDesc = `kind_DESC`,
  NameAsc = `name_ASC`,
  NameDesc = `name_DESC`,
  PictureAsc = `picture_ASC`,
  PictureDesc = `picture_DESC`,
  PublishedAtAsc = `publishedAt_ASC`,
  PublishedAtDesc = `publishedAt_DESC`,
  UpdatedAtAsc = `updatedAt_ASC`,
  UpdatedAtDesc = `updatedAt_DESC`,
}

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** This contains a set of filters that can be used to compare values internally */
export type UserWhereComparatorInput = {
  /** This field can be used to request to check if the entry is outdated by internal comparison */
  outdated_to?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  documentInStages_every?: InputMaybe<UserWhereStageInput>;
  documentInStages_none?: InputMaybe<UserWhereStageInput>;
  documentInStages_some?: InputMaybe<UserWhereStageInput>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Any other value that exists and is not equal to the given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** Any other value that exists and is not equal to the given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  /** Any other value that exists and is not equal to the given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<InputMaybe<UserKind>>>;
  name?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Any other value that exists and is not equal to the given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** Any other value that exists and is not equal to the given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<InputMaybe<Scalars['DateTime']>>>;
};

/** The document in stages filter allows specifying a stage entry to cross compare the same document between different stages */
export type UserWhereStageInput = {
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereStageInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereStageInput>>;
  /** This field contains fields which can be set as true or false to specify an internal comparison */
  compareWithParent?: InputMaybe<UserWhereComparatorInput>;
  /** Specify the stage to compare with */
  stage?: InputMaybe<Stage>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Version = {
  __typename?: 'Version';
  createdAt: Scalars['DateTime'];
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export type VersionWhereInput = {
  id: Scalars['ID'];
  revision: Scalars['Int'];
  stage: Stage;
};

export enum _FilterKind {
  And = `AND`,
  Not = `NOT`,
  Or = `OR`,
  Contains = `contains`,
  ContainsAll = `contains_all`,
  ContainsNone = `contains_none`,
  ContainsSome = `contains_some`,
  EndsWith = `ends_with`,
  Eq = `eq`,
  EqNot = `eq_not`,
  Gt = `gt`,
  Gte = `gte`,
  In = `in`,
  JsonPathExists = `json_path_exists`,
  JsonValueRecursive = `json_value_recursive`,
  Lt = `lt`,
  Lte = `lte`,
  NotContains = `not_contains`,
  NotEndsWith = `not_ends_with`,
  NotIn = `not_in`,
  NotStartsWith = `not_starts_with`,
  RelationalEvery = `relational_every`,
  RelationalNone = `relational_none`,
  RelationalSingle = `relational_single`,
  RelationalSome = `relational_some`,
  Search = `search`,
  StartsWith = `starts_with`,
  UnionEmpty = `union_empty`,
  UnionEvery = `union_every`,
  UnionNone = `union_none`,
  UnionSingle = `union_single`,
  UnionSome = `union_some`,
}

export enum _MutationInputFieldKind {
  Enum = `enum`,
  Relation = `relation`,
  RichText = `richText`,
  RichTextWithEmbeds = `richTextWithEmbeds`,
  Scalar = `scalar`,
  Union = `union`,
  Virtual = `virtual`,
}

export enum _MutationKind {
  Create = `create`,
  Delete = `delete`,
  DeleteMany = `deleteMany`,
  Publish = `publish`,
  PublishMany = `publishMany`,
  SchedulePublish = `schedulePublish`,
  ScheduleUnpublish = `scheduleUnpublish`,
  Unpublish = `unpublish`,
  UnpublishMany = `unpublishMany`,
  Update = `update`,
  UpdateMany = `updateMany`,
  Upsert = `upsert`,
}

export enum _OrderDirection {
  Asc = `asc`,
  Desc = `desc`,
}

export enum _RelationInputCardinality {
  Many = `many`,
  One = `one`,
}

export enum _RelationInputKind {
  Create = `create`,
  Update = `update`,
}

export enum _RelationKind {
  Regular = `regular`,
  Union = `union`,
}

export enum _SystemDateTimeFieldVariation {
  Base = `base`,
  Combined = `combined`,
  Localization = `localization`,
}

export type ArtistsQueryVariables = Exact<{ [key: string]: never }>;

export type ArtistsQuery = {
  __typename?: 'Query';
  artists: Array<{
    __typename?: 'Artist';
    id: string;
    key?: number | null;
    artist_number: number;
    artist_name: string;
    facebook_link?: string | null;
    iframe_sc?: string | null;
    instgram_link?: string | null;
    slug: string;
    sptfy_link: string;
    sc_link?: string | null;
    yt_link?: string | null;
    description: string;
    flag: { __typename?: 'Asset'; url: string };
    picture?: { __typename?: 'Asset'; url: string } | null;
  }>;
};

export type LoginQueryVariables = Exact<{
  username?: InputMaybe<Scalars['String']>;
}>;

export type LoginQuery = {
  __typename?: 'Query';
  dashboard?: {
    __typename?: 'Dashboard';
    email?: string | null;
    id: string;
    password?: string | null;
    project_name?: string | null;
    signature?: string | null;
    username?: string | null;
    responsable_name?: string | null;
    is_signed_contract?: boolean | null;
    updatedAt: any;
    picture?: string | null;
  } | null;
};

export type ReleaseQueryVariables = Exact<{
  slug?: InputMaybe<Scalars['String']>;
}>;

export type ReleaseQuery = {
  __typename?: 'Query';
  release?: {
    __typename?: 'Release';
    id: string;
    music_name: string;
    release_date: any;
    sc_link: string;
    slug: string;
    description: string;
    sptfy_link: string;
    iframe_sc: string;
    yt_link: string;
    buy_link: string;
    artist: string;
    deezer_link?: string | null;
    apple_link?: string | null;
    cover_art: { __typename?: 'Asset'; url: string };
  } | null;
};

export type ReleasesQueryVariables = Exact<{ [key: string]: never }>;

export type ReleasesQuery = {
  __typename?: 'Query';
  releases: Array<{
    __typename?: 'Release';
    id: string;
    music_name: string;
    release_date: any;
    sc_link: string;
    slug: string;
    sptfy_link: string;
    yt_link: string;
    buy_link: string;
    artist: string;
    cover_art: { __typename?: 'Asset'; url: string };
  }>;
};

export const ArtistsDocument = gql`
  query Artists {
    artists(last: 9999) {
      id
      key
      artist_number
      artist_name
      facebook_link
      iframe_sc
      instgram_link
      slug
      sptfy_link
      sc_link
      yt_link
      description
      flag {
        url
      }
      picture {
        url
      }
    }
  }
`;

export function useArtistsQuery(
  options?: Omit<Urql.UseQueryArgs<ArtistsQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ArtistsQuery, ArtistsQueryVariables>({
    query: ArtistsDocument,
    ...options,
  });
}
export const LoginDocument = gql`
  query Login($username: String) {
    dashboard(where: { username: $username }) {
      email
      id
      password
      project_name
      signature
      username
      responsable_name
      is_signed_contract
      updatedAt
      picture
    }
  }
`;

export function useLoginQuery(
  options?: Omit<Urql.UseQueryArgs<LoginQueryVariables>, 'query'>,
) {
  return Urql.useQuery<LoginQuery, LoginQueryVariables>({
    query: LoginDocument,
    ...options,
  });
}
export const ReleaseDocument = gql`
  query Release($slug: String) {
    release(where: { slug: $slug }) {
      id
      music_name
      release_date
      sc_link
      slug
      description
      sptfy_link
      iframe_sc
      yt_link
      buy_link
      artist
      deezer_link
      apple_link
      cover_art {
        url(transformation: { image: { resize: { width: 1000 } } })
      }
    }
  }
`;

export function useReleaseQuery(
  options?: Omit<Urql.UseQueryArgs<ReleaseQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ReleaseQuery, ReleaseQueryVariables>({
    query: ReleaseDocument,
    ...options,
  });
}
export const ReleasesDocument = gql`
  query Releases {
    releases(orderBy: release_date_DESC, last: 999) {
      id
      music_name
      release_date
      sc_link
      slug
      sptfy_link
      yt_link
      buy_link
      artist
      cover_art {
        url(transformation: { image: { resize: { width: 500 } } })
      }
    }
  }
`;

export function useReleasesQuery(
  options?: Omit<Urql.UseQueryArgs<ReleasesQueryVariables>, 'query'>,
) {
  return Urql.useQuery<ReleasesQuery, ReleasesQueryVariables>({
    query: ReleasesDocument,
    ...options,
  });
}


File: /src/components/Sidebar/index.tsx
Content:
/* eslint-disable @next/next/no-img-element */
import Link from 'next/link';
import { useRouter } from 'next/router';
import React from 'react';
import styles from './styles.module.scss';
import {
  SiBeatport,
  SiFacebook,
  SiInstagram,
  SiSoundcloud,
} from 'react-icons/si';
import Image from 'next/image';

export const Sidebar = () => {
  const router = useRouter();
  const route = router.pathname;

  return (
    <div className="is-hidden-mobile">
      <div className={styles.sidenav}>
        <Link href="/">
          <div className="px-6 mb-5 mt-3 pointer">
            <Image width="370" height="275" src="/images/logo.png" alt="logo" />
          </div>
        </Link>
        <div
          className={
            route === `/` || route.includes(`release`)
              ? styles.selectedMenu
              : ``
          }
        >
          <Link href="/">Releases</Link>
        </div>
        <div className={route.includes(`artist`) ? styles.selectedMenu : ``}>
          <Link href="/artists">Artists</Link>
        </div>
        <div className={route === `/demos` ? styles.selectedMenu : ``}>
          <Link href="/demos">Demos</Link>
        </div>
        <div className={route === `/contact` ? styles.selectedMenu : ``}>
          <Link href="/contact">Contact</Link>
        </div>
        {/* <div>
          <a
            target="_blank"
            rel="noreferrer"
            href="https://mushadelicrecords.lojavirtualnuvem.com.br/"
          >
            Store
          </a>
        </div> */}
        <div>
          <a
            target="_blank"
            rel="noreferrer"
            href="https://open.spotify.com/playlist/2On9Qqg6sunRFYP5lhCoSv?si=V79Fv3YeS9iU2fM0qD9Pqw&nd"
          >
            Playlist Spotify
          </a>
        </div>

        <div className={styles.socialNetworks}>
          <a
            href="https://www.beatport.com/label/mushadelic-records/84164"
            target="_blank"
            rel="noreferrer"
          >
            <SiBeatport size={22} />
          </a>
          <a
            href="https://www.instagram.com/mushadelicrecords/"
            target="_blank"
            rel="noreferrer"
          >
            <SiInstagram size={22} />
          </a>
          <a
            href="https://www.facebook.com/mushadelicrec"
            target="_blank"
            rel="noreferrer"
          >
            <SiFacebook size={22} />
          </a>
          <a
            href="https://soundcloud.com/mushadelicrec"
            target="_blank"
            rel="noreferrer"
          >
            <SiSoundcloud size={22} />
          </a>
        </div>
      </div>
      <div className={styles.sidenavDistro}>
        Developed by:{` `}
        <a
          target="_blank"
          href="https://daniel-luiz-alves.vercel.app/"
          rel="noreferrer"
        >
          Daniel Alves
        </a>
      </div>
    </div>
  );
};


File: /src/components/Sidebar/styles.module.scss
Content:
.selectedMenu {
  a {
    color: #9ef300 !important;
    font-size: 1.3rem !important;
  }
}

.sidenav {
  height: 100%;
  width: 260px;
  position: fixed;
  z-index: 1;
  top: 0;
  left: 0;
  background-color: #181818;
  overflow-x: hidden;
  padding-top: 20px;
}

.sidenav a {
  padding: 6px;
  text-decoration: none;
  color: #fff;
  display: flex;
  justify-content: center;
  text-transform: uppercase;
  font-weight: bold;
  font-size: 1rem;
}

.sidenav a:hover {
  color: #9ef300;
}

.socialNetworks {
  margin-top: 2rem;
  display: flex;
  justify-content: center;
  gap: 1rem;
}

.sidenavDistro {
  position: fixed;
  z-index: 1;
  color: #cfcfcf;
  bottom: 20px;
  left: 47px;
  font-size: 13px;
  a {
    &:hover {
      color: #9ef300;
    }
  }
}


File: /src/components/Layout/index.tsx
Content:
import { Sidebar } from '../Sidebar';
import Head from 'next/head';
import Header from '../HeaderMobile';
export default function Layout({ children }: any) {
  return (
    <>
      <Head>
        <title>Elegant Noise Records</title>
        <meta name="description" content="Electronica Jazz Experimental Label" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Sidebar />
      <Header />

      <div className="main">
        <div className="container is-fluid pt-5">{children}</div>
      </div>
    </>
  );
}


File: /src/components/ImageUploader/index.tsx
Content:
import React, { useState, ChangeEvent } from 'react';

interface ImageUploaderProps {
  onImageChange: (dataUrl: string) => void;
}

const ImageUploader: React.FC<ImageUploaderProps> = ({ onImageChange }) => {
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  const handleImageUpload = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    const reader = new FileReader();

    reader.onload = (e) => {
      const img = new Image();

      img.onload = () => {
        const canvas = document.createElement(`canvas`);
        const maxWidth = 400;
        let width = img.width;
        let height = img.height;

        if (width > maxWidth) {
          const scaleFactor = maxWidth / width;
          width = maxWidth;
          height = Math.floor(height * scaleFactor);
        }

        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext(`2d`);
        ctx?.drawImage(img, 0, 0, width, height);

        const dataUrl = canvas.toDataURL(`image/jpeg`);
        setSelectedImage(dataUrl);
        onImageChange(dataUrl);
      };

      img.src = e.target?.result as string;
    };

    if (file) {
      reader.readAsDataURL(file);
    }
  };

  return (
    <div style={{ display: `flex`, flexDirection: `column`, gap: `20px` }}>
      {selectedImage && (
        <img
          style={{ border: `1px solid #9ef300` }}
          width={200}
          src={selectedImage}
          alt="Preview"
        />
      )}
      <input type="file" accept="image/*" onChange={handleImageUpload} />
    </div>
  );
};

export default ImageUploader;


File: /src/components/HeaderMobile/index.tsx
Content:
import Image from 'next/image';
import Link from 'next/link';
import React, { useState } from 'react';
import { GiHamburgerMenu } from 'react-icons/gi';
import { RiCloseFill } from 'react-icons/ri';
import styles from './styles.module.scss';

export default function Header() {
  const [isOpen, setIsOpen] = useState(false);
  return (
    <div className="is-hidden-tablet">
      <div className={styles.header}>
        <div className="container">
          <div className={styles.headerContent}>
            <Link href="/" passHref>
              <Image
                src="/images/mobile.png"
                alt="logo"
                width="175"
                height="50"
                style={{ cursor: `pointer` }}
              />
            </Link>
            <div className={styles.headerGrid}>
              <div className={styles.hamburguerMenu}>
                <GiHamburgerMenu
                  size={30}
                  cursor="pointer"
                  color="#fff"
                  onClick={() => setIsOpen(!isOpen)}
                />
                {isOpen && (
                  <>
                    <div className={styles.sidebar}>
                      <div className={styles.sidebarHeader}>
                        <RiCloseFill
                          size={30}
                          color="#fff"
                          onClick={() => setIsOpen(!isOpen)}
                        />
                      </div>
                      <div className={styles.sidebarLinks}>
                        <Link href="/" passHref>
                          <span onClick={() => setIsOpen(!isOpen)}>
                            Releases
                          </span>
                        </Link>
                        <Link href="/artists" passHref>
                          <span onClick={() => setIsOpen(!isOpen)}>
                            Artists
                          </span>
                        </Link>
                        <Link href="/demos" passHref>
                          <span onClick={() => setIsOpen(!isOpen)}>Demos</span>
                        </Link>
                        <Link href="/contact" passHref>
                          <span onClick={() => setIsOpen(!isOpen)}>
                            Contact
                          </span>
                        </Link>
                        {/* <a
                          target="_blank"
                          rel="noreferrer"
                          href="https://mushadelicrecords.lojavirtualnuvem.com.br/"
                        >
                          Store
                        </a> */}
                        <a
                          target="_blank"
                          rel="noreferrer"
                          href="https://open.spotify.com/playlist/2On9Qqg6sunRFYP5lhCoSv?si=V79Fv3YeS9iU2fM0qD9Pqw&nd"
                        >
                          Playlist Spotify
                        </a>
                      </div>
                    </div>
                    <div
                      className={styles.backdrop}
                      onClick={() => setIsOpen(!isOpen)}
                    />
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


File: /src/components/HeaderMobile/styles.module.scss
Content:
.header {
  background: #181818;
  height: 5rem;
  display: flex;
  align-items: center;
  margin-bottom: 1rem;
}

.headerContent {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-left: 2rem;
  padding-right: 2rem;
}

.headerGrid {
  display: flex;
  align-items: center;
  gap: 1.8rem;
}

.hamburguerMenu {
  display: flex;
  align-items: center;
}

.sidebar {
  width: 65%;
  height: 100%;
  background: #333;
  position: fixed;
  padding: 2rem;
  top: 0;
  left: 0;
  z-index: 99;
}

.sidebarHeader {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin-bottom: 1rem;
}

.sidebarLinks {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-top: 2rem;
  margin-bottom: 1.2rem;
  color: #fff !important;

  a {
    color: #fff !important;
  }
}

.backdrop {
  width: 35%;
  height: 100%;
  background: #00000033;
  position: fixed;
  top: 0;
  right: 0;
  z-index: 99;
}


File: /src/components/FilterInput/index.tsx
Content:
import React from 'react';
import { BiSearchAlt } from 'react-icons/bi';

export const FilterInput = ({ value, filter, placeholder }: any) => (
  <div className=" is-flex is-justify-content-flex-end mb-4 mr-2 is-hidden-mobile">
    <div className="field">
      <p className="control has-icons-right">
        <input
          className="input placeholder-light"
          type="text"
          placeholder={placeholder}
          value={value}
          onChange={filter}
        />
        <span className="icon is-small is-right">
          <BiSearchAlt color="#9ef300" />
        </span>
      </p>
    </div>
  </div>
);



File: /.husky/commit-msg
Content:
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"
. "$(dirname "$0")/common.sh"

yarn commitlint --edit $1


File: /.husky/common.sh
Content:
command_exists () {
  command -v "$1" >/dev/null 2>&1
}

# Workaround for Windows 10, Git Bash and Yarn
if command_exists winpty && test -t 1; then
  exec < /dev/tty
fi


File: /.husky/pre-commit
Content:
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"
. "$(dirname "$0")/common.sh"

yarn lint-staged


File: /.github/workflows/ci.yml
Content:
name: Check PR

on: [pull_request]

jobs:
  run-ci:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    name: Run Type Check & Linters
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install dependencies (with cache)
        uses: bahmutov/npm-install@v1

      - name: Check types
        run: yarn type-check

      - name: Check linting
        run: yarn lint

      - name: Check commits messages
        uses: wagoid/commitlint-github-action@v4


